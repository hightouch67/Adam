<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:CMWPF.Ressources"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:Themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit"
                    xmlns:Themes1="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                                 xmlns:fa="http://schemas.fontawesome.io/icons/"

                    mc:Ignorable="d">
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="TabItem.Static.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#F0F0F0" Offset="0.0"/>
        <GradientStop Color="#E5E5E5" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="TabItem.Static.Border" Color="#ACACAC"/>
    <LinearGradientBrush x:Key="TabItem.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#ECF4FC" Offset="0.0"/>
        <GradientStop Color="#DCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="#7EB4EA"/>
    <SolidColorBrush x:Key="TabItem.Disabled.Background" Color="#F0F0F0"/>
    <SolidColorBrush x:Key="TabItem.Disabled.Border" Color="#D9D9D9"/>
    <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC"/>
    <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF"/>
    <Style x:Key="TabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Background" Value="{StaticResource TabItem.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource TabItem.Static.Border}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="6,2,6,2"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Border x:Name="mainBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2,0,0,0" Background="{TemplateBinding Background}" Margin="0" CornerRadius="5,5,0,0">
                            <Border x:Name="innerBorder" BorderBrush="{StaticResource TabItem.Selected.Border}" BorderThickness="1,1,0,0" Margin="-1" Opacity="0.2" CornerRadius="5,5,0,0" Background="White"/>
                        </Border>
                        <TextBlock x:Name="contentPresenter" Text="{TemplateBinding Header}" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Height="Auto" TextAlignment="Center" TextWrapping="Wrap" Foreground="White" FontWeight="Bold" Margin="20,10" FontSize="24" FontFamily="Open Sans"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>-->
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>-->
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>-->
                            <!--<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>-->
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <!--<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>-->
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <!--<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>-->
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <!--<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>-->
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,-2,0,-2"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="0.2"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,0,-2,-2"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="0.2"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="0,-2,-2,-2"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="0.2"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="0.2"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="BrushGray" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF37474F" Offset="1"/>
        <GradientStop Color="#FF607D8B" Offset="0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="BrushGreen" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF4CAF50" Offset="0"/>
        <GradientStop Color="#FF1B5E20" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="BrushRed" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF44336" Offset="0"/>
        <GradientStop Color="#FFB71C1C" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="BrushOrange" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFFF9800" Offset="0"/>
        <GradientStop Color="#FFE65100" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="BrushBleu" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF03A9F4" Offset="0"/>
        <GradientStop Color="#FF01579B" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="BrushYellow" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFFDD835" Offset="0"/>
        <GradientStop Color="#FFFBC02D" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="BrushViolet" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF673AB7" Offset="0"/>
        <GradientStop Color="#FF311B92" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
    <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontFamily" Value="/CMWPF;component/Ressources/#FontAwesome"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="30">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="20,5,20,10" Content="{TemplateBinding Content}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ControlTemplateProfil" TargetType="{x:Type Control}">
        <Grid>
            <Viewbox>
                <Canvas Width="556.266" Height="556.264">
                    <Rectangle Width="556.266" Height="556.264" Canvas.Left="0" Canvas.Top="0" Stretch="Fill" Fill="#FFEFBA67" RadiusX="50" RadiusY="50"/>
                    <Viewbox Width="456.603" Height="297.979" Canvas.Left="55.1966" Canvas.Top="151.406">
                        <Canvas Width="456.603" Height="297.979">
                            <Viewbox Width="456" Height="298" Canvas.Top="0">
                                <Canvas Width="456.603" Height="297.979">
                                    <Rectangle Width="203.254" Height="15.0195" Canvas.Left="219.496" Canvas.Top="31.8867" Stretch="Fill" Fill="#FFFFFFFF"/>
                                    <Rectangle Width="203.254" Height="15.0195" Canvas.Left="219.496" Canvas.Top="66.8945" Stretch="Fill" Fill="#FFFFFFFF"/>
                                    <Rectangle Width="203.254" Height="15.0169" Canvas.Left="219.496" Canvas.Top="101.9" Stretch="Fill" Fill="#FFFFFFFF"/>
                                    <Rectangle Width="126.003" Height="15.0208" Canvas.Left="219.496" Canvas.Top="136.904" Stretch="Fill" Fill="#FFFFFFFF"/>
                                    <Path Width="456.603" Height="297.979" Canvas.Left="0" Canvas.Top="0" Stretch="Fill" Fill="#FFFFFFFF" Data="F1 M 456.169,175.596L 456.169,18.3958C 456.169,8.25259 447.918,0 437.775,0L 18.3971,0C 8.25391,0 0,8.25259 0,18.3958L 0,279.583C 0,289.727 8.25391,297.979 18.3971,297.979L 335.624,297.979L 343.703,289.203L 349.607,283.266L 441.46,190.841L 448.57,183.677L 456.169,176.035L 456.603,175.596L 456.169,175.596 Z M 345.723,175.596C 340.155,175.596 335.624,180.13 335.624,185.698L 335.624,283.266L 18.3971,283.266C 16.4036,283.266 14.7201,281.581 14.7201,279.583L 14.7201,18.3958C 14.7201,16.4023 16.4036,14.7188 18.3971,14.7188L 437.775,14.7188C 439.767,14.7188 441.46,16.4023 441.46,18.3958L 441.46,175.596L 345.723,175.596 Z "/>
                                </Canvas>
                            </Viewbox>
                            <Path Width="178.204" Height="87.4206" Canvas.Left="29.0938" Canvas.Top="165.319" Stretch="Fill" Fill="#FFFFFFFF" Data="F1 M 207.167,176.751C 187.868,173.186 168.776,168.99 149.477,165.319C 138.776,181.053 97.5495,181.368 87.1641,165.319C 67.7565,169.094 48.457,172.975 29.1549,176.964C 29.0938,202.223 29.0951,227.48 29.0938,252.74L 207.296,252.74C 207.305,227.423 207.29,202.09 207.167,176.751 Z "/>
                            <Path Width="105.363" Height="105.37" Canvas.Left="64.1816" Canvas.Top="38.6584" Stretch="Fill" Fill="#FFFFFFFF" Data="F1 M 123.793,143.513C 145.504,141.033 164.426,123.352 168.458,101.846C 172.077,84.8893 166.492,66.3828 154.19,54.2864C 143.335,43.1198 127.31,37.4336 111.799,38.8802C 91.7422,40.7422 73.4414,54.8021 67.1341,74.0338C 60.724,91.7148 64.9648,112.805 77.7852,126.556C 89.0534,139.376 106.939,145.995 123.793,143.513 Z "/>
                        </Canvas>
                    </Viewbox>
                </Canvas>
            </Viewbox>
            <TextBlock Text="{TemplateBinding Tag}" TextWrapping="Wrap" HorizontalAlignment="Center" TextAlignment="Center"></TextBlock>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="ControlTemplateFriends" TargetType="{x:Type Control}">
        <Grid>
            <Viewbox >
                <Canvas Width="556.266" Height="556.265">
                    <Rectangle Width="556.266" Height="556.265" Canvas.Left="0" Canvas.Top="0" Stretch="Fill" Fill="#FFFF4B7A" RadiusX="50" RadiusY="50"/>
                    <Path Width="444.611" Height="363.807" Canvas.Left="111.655" Canvas.Top="192.458" Stretch="Fill" Fill="#FFBD3153" Data="F1 M 111.655,444.432L 278.133,556.265L 556.266,556.265L 556.266,300.679L 431.688,192.458L 380.909,280.658L 184.818,197.835L 111.655,444.432 Z "/>
                    <Path Width="350.669" Height="255.378" Canvas.Left="111.655" Canvas.Top="189.054" Stretch="Fill" Fill="#FFFFFFFF" Data="F1 M 199.138,226.47C 199.138,247.158 181.147,263.886 159.049,263.886C 136.814,263.886 118.868,247.158 118.868,226.47C 118.868,205.826 136.814,189.054 159.049,189.054C 181.147,189.054 199.138,205.826 199.138,226.47 Z M 374.841,226.47C 374.841,247.158 392.829,263.886 414.927,263.886C 437.163,263.886 455.15,247.158 455.15,226.47C 455.15,205.826 437.163,189.054 414.927,189.054C 392.829,189.054 374.841,205.826 374.841,226.47 Z M 264.798,355.066C 263.884,347.107 267.174,339.742 272.742,334.377C 238.772,328.333 224.846,312.882 212.743,298.921C 206.857,292.068 201.238,285.554 193.798,280.956C 193.568,280.829 193.319,280.829 193.115,280.658C 186.763,275.764 178.727,272.658 169.874,272.658L 148.185,272.658C 128.091,272.658 111.655,287.936 111.655,306.645L 111.655,444.432L 206.398,444.432L 206.398,340.039C 220.234,351.342 239.779,362.048 269.818,366.729C 267.31,363.324 265.346,359.471 264.798,355.066 Z M 425.84,272.658L 404.083,272.658C 395.271,272.658 387.188,275.764 380.909,280.658C 380.66,280.829 380.409,280.829 380.223,280.956C 372.784,285.554 367.165,292.023 361.23,298.921C 347.945,314.244 332.875,331.739 290.73,336.08C 281.191,337.102 274.339,345.105 275.391,353.98C 276.35,362.302 283.884,368.41 292.648,368.41C 293.29,368.41 293.926,368.368 294.609,368.326C 330.318,364.622 352.415,352.788 367.622,340.231L 367.622,444.432L 462.324,444.432L 462.324,306.645C 462.324,287.936 445.884,272.658 425.84,272.658 Z "/>
                </Canvas>
            </Viewbox>
        </Grid>
    </ControlTemplate>
    <Style x:Key="TextBlockStyleForm" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="TextTrimming" Value="None"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="Foreground" Value="Black"/>
    </Style>
    <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/>
    <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
    <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
    <SolidColorBrush x:Key="BrushWhiteForm" Color="White"/>
    <Style x:Key="TextBoxStyleForm" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource BrushWhiteForm}" SnapsToDevicePixels="True" CornerRadius="15" Margin="0,0,0,10">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Margin="10,0,0,0"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DatePickerStyle" TargetType="{x:Type DatePicker}">
        <Setter Property="Foreground" Value="#FF333333"/>
        <Setter Property="IsTodayHighlighted" Value="True"/>
        <Setter Property="SelectedDateFormat" Value="Short"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint=".5,0" StartPoint=".5,1">
                    <GradientStop Color="#FFA3AEB9" Offset="0"/>
                    <GradientStop Color="#FF8399A9" Offset="0.375"/>
                    <GradientStop Color="#FF718597" Offset="0.375"/>
                    <GradientStop Color="#FF617584" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="0" Margin="0,0,0,10" Height="32">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="PART_Root" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid.Resources>
                                <SolidColorBrush x:Key="DisabledBrush" Color="#A5FFFFFF"/>
                                <ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type Button}">
                                    <Grid>
                                        <VisualStateManager.VisualStateGroups>
                                            <VisualStateGroup x:Name="CommonStates">
                                                <VisualStateGroup.Transitions>
                                                    <VisualTransition GeneratedDuration="0"/>
                                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Pressed"/>
                                                </VisualStateGroup.Transitions>
                                                <VisualState x:Name="Normal"/>
                                                <VisualState x:Name="MouseOver">
                                                    <Storyboard>
                                                        <ColorAnimation Duration="0" To="#FF448DCA" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Background"/>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#7FFFFFFF"/>
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#CCFFFFFF"/>
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#F2FFFFFF"/>
                                                        </ColorAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="Pressed">
                                                    <Storyboard>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Background">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#FF448DCA"/>
                                                        </ColorAnimationUsingKeyFrames>
                                                        <DoubleAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Highlight">
                                                            <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                                                        </DoubleAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#EAFFFFFF"/>
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#C6FFFFFF"/>
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#6BFFFFFF"/>
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#F4FFFFFF"/>
                                                        </ColorAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="Disabled"/>
                                            </VisualStateGroup>
                                        </VisualStateManager.VisualStateGroups>
                                        <Grid Background="#11FFFFFF" FlowDirection="LeftToRight" HorizontalAlignment="Center" Height="18" Margin="0" VerticalAlignment="Center" Width="19">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="20*"/>
                                                <ColumnDefinition Width="20*"/>
                                                <ColumnDefinition Width="20*"/>
                                                <ColumnDefinition Width="20*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="23*"/>
                                                <RowDefinition Height="19*"/>
                                                <RowDefinition Height="19*"/>
                                                <RowDefinition Height="19*"/>
                                            </Grid.RowDefinitions>
                                            <Border x:Name="Highlight" BorderBrush="#FF45D6FA" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius="0,0,1,1" Margin="-1" Opacity="0" Grid.Row="0" Grid.RowSpan="4"/>
                                            <Border x:Name="Background" BorderBrush="#FFFFFFFF" BorderThickness="1" Background="#FF1F3B53" Grid.ColumnSpan="4" CornerRadius=".5" Margin="0,-1,0,0" Opacity="1" Grid.Row="1" Grid.RowSpan="3"/>
                                            <Border x:Name="BackgroundGradient" BorderBrush="#BF000000" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius=".5" Margin="0,-1,0,0" Opacity="1" Grid.Row="1" Grid.RowSpan="3">
                                                <Border.Background>
                                                    <LinearGradientBrush EndPoint=".7,1" StartPoint=".7,0">
                                                        <GradientStop Color="#FFFFFFFF" Offset="0"/>
                                                        <GradientStop Color="#F9FFFFFF" Offset="0.375"/>
                                                        <GradientStop Color="#E5FFFFFF" Offset="0.625"/>
                                                        <GradientStop Color="#C6FFFFFF" Offset="1"/>
                                                    </LinearGradientBrush>
                                                </Border.Background>
                                            </Border>
                                            <Rectangle Grid.ColumnSpan="4" Grid.RowSpan="1" StrokeThickness="1">
                                                <Rectangle.Fill>
                                                    <LinearGradientBrush EndPoint="0.3,-1.1" StartPoint="0.46,1.6">
                                                        <GradientStop Color="#FF4084BD"/>
                                                        <GradientStop Color="#FFAFCFEA" Offset="1"/>
                                                    </LinearGradientBrush>
                                                </Rectangle.Fill>
                                                <Rectangle.Stroke>
                                                    <LinearGradientBrush EndPoint="0.48,-1" StartPoint="0.48,1.25">
                                                        <GradientStop Color="#FF494949"/>
                                                        <GradientStop Color="#FF9F9F9F" Offset="1"/>
                                                    </LinearGradientBrush>
                                                </Rectangle.Stroke>
                                            </Rectangle>
                                            <Path Grid.ColumnSpan="4" Grid.Column="0" Data="M11.426758,8.4305077 L11.749023,8.4305077 L11.749023,16.331387 L10.674805,16.331387 L10.674805,10.299648 L9.0742188,11.298672 L9.0742188,10.294277 C9.4788408,10.090176 9.9094238,9.8090878 10.365967,9.4510155 C10.82251,9.0929432 11.176106,8.7527733 11.426758,8.4305077 z M14.65086,8.4305077 L18.566387,8.4305077 L18.566387,9.3435936 L15.671368,9.3435936 L15.671368,11.255703 C15.936341,11.058764 16.27293,10.960293 16.681133,10.960293 C17.411602,10.960293 17.969301,11.178717 18.354229,11.615566 C18.739157,12.052416 18.931622,12.673672 18.931622,13.479336 C18.931622,15.452317 18.052553,16.438808 16.294415,16.438808 C15.560365,16.438808 14.951641,16.234707 14.468243,15.826504 L14.881817,14.929531 C15.368796,15.326992 15.837872,15.525723 16.289043,15.525723 C17.298809,15.525723 17.803692,14.895514 17.803692,13.635098 C17.803692,12.460618 17.305971,11.873379 16.310528,11.873379 C15.83071,11.873379 15.399232,12.079271 15.016094,12.491055 L14.65086,12.238613 z" Fill="#FF2F2F2F" HorizontalAlignment="Center" Margin="4,3,4,3" Grid.Row="1" Grid.RowSpan="3" RenderTransformOrigin="0.5,0.5" Stretch="Fill" VerticalAlignment="Center"/>
                                            <Ellipse Grid.ColumnSpan="4" Fill="#FFFFFFFF" HorizontalAlignment="Center" Height="3" StrokeThickness="0" VerticalAlignment="Center" Width="3"/>
                                            <Border x:Name="DisabledVisual" BorderBrush="#B2FFFFFF" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius="0,0,.5,.5" Opacity="0" Grid.Row="0" Grid.RowSpan="4"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </Grid.Resources>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <DatePickerTextBox x:Name="PART_TextBox" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="Stretch" Grid.Row="0" VerticalContentAlignment="Stretch" Width="Auto" Style="{DynamicResource DatePickerTextBoxStyleForm}" Grid.ColumnSpan="2" Margin="25,0,0,0" Text="Choisir une date"/>
                            <Button x:Name="PART_Button" Grid.Column="0" Foreground="{TemplateBinding Foreground}" Focusable="False" HorizontalAlignment="Left" Margin="0" Grid.Row="0" Template="{DynamicResource ButtonControlDatePicker}" VerticalAlignment="Top" Width="Auto" Height="Auto"/>
                            <Grid x:Name="PART_DisabledVisual" Grid.ColumnSpan="2" Grid.Column="0" IsHitTestVisible="False" Opacity="0" Grid.Row="0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Rectangle Grid.Column="0" Fill="#A5FFFFFF" RadiusY="1" Grid.Row="0" RadiusX="1"/>
                                <Rectangle Grid.Column="1" Fill="#A5FFFFFF" Height="18" Margin="3,0,3,0" RadiusY="1" Grid.Row="0" RadiusX="1" Width="19"/>
                                <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=PART_TextBox}" StaysOpen="False"/>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="false">
                            <Setter Property="Foreground" TargetName="PART_TextBox" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DateTimePickerStyle" TargetType="{x:Type xctk:DateTimePicker}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
        <Setter Property="BorderThickness" Value="1,1,0,1"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="TimeWatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False" Margin="0,0,3,0"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="WatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False" Margin="0,0,3,0"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:DateTimePicker}">
                    <Border>
                        <Grid>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <xctk:ButtonSpinner x:Name="PART_Spinner" AllowSpin="{TemplateBinding AllowSpin}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}" Background="{TemplateBinding Background}" HorizontalContentAlignment="Stretch" IsTabStop="False" ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}" VerticalContentAlignment="Stretch" Grid.Column="1">
                                    <xctk:WatermarkTextBox x:Name="PART_TextBox" AcceptsReturn="False" BorderThickness="0" Background="Transparent" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsTabStop="{TemplateBinding IsTabStop}" IsUndoEnabled="True" MinWidth="20" Padding="{TemplateBinding Padding}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="NoWrap" Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" TabIndex="{TemplateBinding TabIndex}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" WatermarkTemplate="{TemplateBinding WatermarkTemplate}" Watermark="{TemplateBinding Watermark}"/>
                                </xctk:ButtonSpinner>
                                <ToggleButton x:Name="_calendarToggleButton" Background="White" Grid.Column="0" Focusable="False" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ToggleButton.IsHitTestVisible>
                                        <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <xctk:InverseBoolConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </ToggleButton.IsHitTestVisible>
                                    <ToggleButton.IsEnabled>
                                        <Binding Path="IsReadOnly" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <xctk:InverseBoolConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </ToggleButton.IsEnabled>
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Grid SnapsToDevicePixels="True">
                                                            <xctk:ButtonChrome x:Name="ToggleButtonChrome" CornerRadius="0" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:DateTimePicker}}}" RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:DateTimePicker}}}">
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition Width="*"/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch"/>
                                                                    <Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="5">
                                                                        <Path x:Name="Arrow" Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z" Fill="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" Height="5" Margin="0,1,0,0" Width="9"/>
                                                                    </Grid>
                                                                </Grid>
                                                            </xctk:ButtonChrome>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                    <ToggleButton.Visibility>
                                        <TemplateBinding Property="ShowDropDownButton">
                                            <TemplateBinding.Converter>
                                                <BooleanToVisibilityConverter/>
                                            </TemplateBinding.Converter>
                                        </TemplateBinding>
                                    </ToggleButton.Visibility>
                                </ToggleButton>
                            </Grid>
                            <Popup x:Name="PART_Popup" IsOpen="{Binding IsChecked, ElementName=_calendarToggleButton}" StaysOpen="False" ToolTip="">
                                <Popup.Resources>
                                    <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                        <Style.Triggers>
                                            <Trigger Property="Content" Value="">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Popup.Resources>
                                <Border BorderBrush="#FFABADB3" BorderThickness="1" Padding="3">
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                            <GradientStop Color="#FFF0F0F0" Offset="0"/>
                                            <GradientStop Color="#FFE5E5E5" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Border.Background>
                                    <StackPanel>
                                        <Calendar x:Name="PART_Calendar" BorderThickness="0" DisplayMode="{Binding CalendarDisplayMode, RelativeSource={RelativeSource TemplatedParent}}" DisplayDate="2017-04-24"/>
                                        <xctk:TimePicker x:Name="PART_TimeUpDown" AllowSpin="{TemplateBinding TimePickerAllowSpin}" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" ClipValueToMinMax="{Binding ClipValueToMinMax, RelativeSource={RelativeSource TemplatedParent}}" Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" FormatString="{TemplateBinding TimeFormatString}" Format="{TemplateBinding TimeFormat}" IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}" Kind="{Binding Kind, RelativeSource={RelativeSource TemplatedParent}}" Maximum="{Binding Maximum, RelativeSource={RelativeSource TemplatedParent}}" Minimum="{Binding Minimum, RelativeSource={RelativeSource TemplatedParent}}" ShowButtonSpinner="{TemplateBinding TimePickerShowButtonSpinner}" Text="" Visibility="{TemplateBinding TimePickerVisibility}" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" WatermarkTemplate="{TemplateBinding TimeWatermarkTemplate}" Watermark="{TemplateBinding TimeWatermark}"/>
                                    </StackPanel>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlMouseOverBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True"/>
                        </DataTrigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="FocusManager.FocusedElement" TargetName="PART_TextBox" Value="{Binding ElementName=PART_TextBox}"/>
                        </Trigger>
                        <Trigger Property="UpdateValueOnEnterKey" Value="True">
                            <Setter Property="Value" TargetName="PART_TimeUpDown" Value="{Binding Value, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DatePickerTextBoxStyleForm" TargetType="{x:Type DatePickerTextBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePickerTextBox}">
                    <Grid>
                        <Grid.Resources>
                            <SolidColorBrush x:Key="WatermarkBrush" Color="#FFAAAAAA"/>
                        </Grid.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" To="#FF99C1E2" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="ContentElement"/>
                                        <ColorAnimation Duration="0" To="#FF99C1E2" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="watermark_decorator"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="WatermarkStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unwatermarked"/>
                                <VisualState x:Name="Watermarked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ContentElement"/>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Watermark"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FocusVisual"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="15" Opacity="1" Padding="{TemplateBinding Padding}">
                            <Grid x:Name="WatermarkContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Border x:Name="ContentElement" BorderBrush="#FFFFFFFF" BorderThickness="0"/>
                                <Border x:Name="watermark_decorator" BorderBrush="#FFFFFFFF" BorderThickness="0" Margin="35,0,0,0">
                                    <ContentControl x:Name="PART_Watermark" Focusable="False" IsHitTestVisible="False" Opacity="0" Padding="2"/>
                                </Border>
                                <ScrollViewer x:Name="PART_ContentHost" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="35,0,0,0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <Border x:Name="FocusVisual" BorderBrush="#FF45D6FA" CornerRadius="1" IsHitTestVisible="False" Opacity="0"/>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ButtonControlDatePicker" TargetType="{x:Type Button}">
        <Grid Height="32">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0"/>
                        <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                        <VisualTransition GeneratedDuration="0:0:0.1" To="Pressed"/>
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="Normal"/>
                    <VisualState x:Name="MouseOver">
                        <Storyboard/>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard/>
                    </VisualState>
                    <VisualState x:Name="Disabled"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid Background="#11FFFFFF" FlowDirection="LeftToRight" HorizontalAlignment="Center" Height="Auto" Margin="0" VerticalAlignment="Center" Width="Auto" Visibility="Collapsed">
                <Border Width="Auto" Height="Auto" Background="{DynamicResource BrushOrange}" CornerRadius="15,0,0,15"/>
                <Viewbox Width="Auto" Height="Auto" Margin="5">
                    <Canvas Width="84.9309" Height="84.9271">
                        <Path Width="84.9309" Height="84.9271" Canvas.Left="0" Canvas.Top="0" Stretch="Fill" Fill="#FF252934" Data="F1 M 84.9309,42.4609C 84.9309,65.9153 65.9185,84.9271 42.4628,84.9271C 19.0097,84.9271 0,65.9153 0,42.4609C 0,19.0091 19.0097,0 42.4628,0C 65.9185,0 84.9309,19.0091 84.9309,42.4609 Z "/>
                        <Path Width="78.4004" Height="78.4004" Canvas.Left="3.26561" Canvas.Top="3.26373" Stretch="Fill" Fill="#FFFFFFFF" Data="F1 M 81.666,42.4609C 81.666,64.1093 64.1177,81.6642 42.4628,81.6642C 20.8157,81.6642 3.26561,64.1093 3.26561,42.4609C 3.26561,20.8144 20.8157,3.26373 42.4628,3.26373C 64.1177,3.26373 81.666,20.8144 81.666,42.4609 Z "/>
                        <Viewbox Width="68.1283" Height="70.0215" Canvas.Left="8.4016" Canvas.Top="7.45251">
                            <Canvas Width="68.1283" Height="70.0215">
                                <Viewbox Width="4.68109" Height="3.24869" Canvas.Left="31.7435" Canvas.Top="0">
                                    <Canvas Width="4.68109" Height="3.24869">
                                        <Path Width="1.41614" Height="3.24869" Canvas.Left="0" Canvas.Top="0" Stretch="Fill" Fill="#FF000000" Data="F1 M 0.775482,3.24869L 0.775482,1.02924L 0,1.02924L 0,0.572296L 0.0508118,0.572296C 0.334015,0.572296 0.542419,0.528015 0.670013,0.441345C 0.797607,0.353485 0.870544,0.205078 0.896545,0L 1.41614,0L 1.41614,3.24869L 0.775482,3.24869 Z "/>
                                        <Path Width="2.30402" Height="3.24869" Canvas.Left="2.37708" Canvas.Top="0" Stretch="Fill" Fill="#FF000000" Data="F1 M 2.37708,3.24869C 2.37762,2.95895 2.44214,2.71094 2.56256,2.51044C 2.68628,2.30856 2.89789,2.10284 3.2084,1.89642C 3.25336,1.86523 3.32175,1.82028 3.40826,1.76563C 3.81708,1.50122 4.02216,1.25 4.02216,1.00909C 4.02216,0.865906 3.97467,0.753906 3.89069,0.669891C 3.80347,0.585876 3.68829,0.547485 3.53906,0.547485C 3.37762,0.547485 3.25,0.596283 3.16028,0.698547C 3.07175,0.80069 3.02747,0.946533 3.02747,1.1347L 3.02747,1.1615L 2.43295,1.1615C 2.43295,0.791626 2.53003,0.505219 2.72922,0.301361C 2.92841,0.0982666 3.21429,0 3.58401,0C 3.91736,0 4.18359,0.0917664 4.37961,0.273376C 4.58215,0.456299 4.68109,0.698547 4.68109,1.00256C 4.68109,1.21735 4.63028,1.40363 4.52161,1.56378C 4.42068,1.72202 4.22333,1.90363 3.92136,2.10483C 3.85815,2.14975 3.76761,2.20697 3.65762,2.28058C 3.37189,2.45963 3.21429,2.60217 3.17654,2.69522L 4.64923,2.69522L 4.64923,3.24869L 2.37708,3.24869 Z "/>
                                    </Canvas>
                                </Viewbox>
                                <Path Width="2.35028" Height="3.34509" Canvas.Left="0" Canvas.Top="33.2051" Stretch="Fill" Fill="#FF000000" Data="F1 M 1.67067,35.1816C 1.5912,35.2571 1.50453,35.3158 1.40108,35.3535C 1.2988,35.386 1.17975,35.4095 1.05414,35.4095C 0.735062,35.4095 0.477859,35.3131 0.283875,35.1204C 0.0977325,34.9278 0,34.6699 0,34.3489C 0,34.0039 0.104263,33.7304 0.313202,33.5222C 0.520935,33.3105 0.797607,33.2051 1.13747,33.2051C 1.53387,33.2051 1.83534,33.345 2.04041,33.6159C 2.2468,33.8854 2.35028,34.2871 2.35028,34.8079C 2.35028,35.3718 2.23761,35.804 2.02213,36.1022C 1.79947,36.3964 1.4812,36.5502 1.06573,36.5502C 0.781326,36.5502 0.553467,36.4745 0.377594,36.3262C 0.19986,36.1803 0.104263,35.9784 0.0866699,35.7194L 0.741592,35.7194C 0.757874,35.8262 0.797607,35.9068 0.867203,35.9563C 0.932266,36.0059 1.02414,36.0305 1.14655,36.0305C 1.31119,36.0305 1.43692,35.9628 1.51961,35.8183C 1.60681,35.6778 1.65627,35.4655 1.67067,35.1816 Z M 1.65761,34.3365C 1.65761,34.1497 1.60947,34.0005 1.51694,33.8946C 1.42386,33.7896 1.2988,33.7304 1.13747,33.7304C 0.986404,33.7304 0.867203,33.7864 0.787201,33.8854C 0.700531,33.9948 0.661469,34.1374 0.661469,34.3275C 0.661469,34.5012 0.700531,34.6387 0.790405,34.7376C 0.878265,34.8339 1.004,34.8835 1.16013,34.8835C 1.31641,34.8835 1.43692,34.8365 1.52802,34.7402C 1.61134,34.6439 1.65761,34.5084 1.65761,34.3365 Z "/>
                                <Path Width="2.34506" Height="3.34256" Canvas.Left="32.8444" Canvas.Top="66.679" Stretch="Fill" Fill="#FF000000" Data="F1 M 33.5215,68.0436C 33.5931,67.9694 33.6863,67.916 33.7891,67.873C 33.8945,67.8352 34.0079,67.8131 34.1407,67.8131C 34.4544,67.8131 34.7097,67.916 34.8985,68.1087C 35.0944,68.2988 35.1895,68.5592 35.1895,68.8808C 35.1895,69.222 35.082,69.4954 34.8783,69.7063C 34.6648,69.9172 34.392,70.0215 34.0488,70.0215C 33.6556,70.0215 33.3575,69.8835 33.1517,69.6125C 32.9433,69.3431 32.8444,68.9459 32.8444,68.4199C 32.8444,67.8574 32.9519,67.4225 33.1693,67.1256C 33.3913,66.8248 33.7077,66.679 34.1205,66.679C 34.4101,66.679 34.6341,66.7505 34.8152,66.903C 34.9903,67.0527 35.0867,67.2532 35.1048,67.5084L 34.4447,67.5084C 34.4329,67.4068 34.392,67.3287 34.3236,67.2727C 34.2572,67.2194 34.1653,67.1947 34.0436,67.1947C 33.8821,67.1947 33.7545,67.2663 33.6707,67.4068C 33.582,67.5461 33.532,67.7611 33.5215,68.0436 Z M 33.53,68.8951C 33.53,69.0787 33.5775,69.2245 33.6707,69.3339C 33.7624,69.442 33.8893,69.4954 34.0488,69.4954C 34.1999,69.4954 34.3164,69.4459 34.4011,69.3431C 34.4851,69.2298 34.5287,69.0852 34.5287,68.8991C 34.5287,68.718 34.4851,68.5879 34.3952,68.4902C 34.306,68.3951 34.1856,68.3444 34.028,68.3444C 33.8711,68.3444 33.7487,68.3951 33.6628,68.4902C 33.5749,68.5879 33.53,68.718 33.53,68.8951 Z "/>
                                <Path Width="2.33069" Height="3.33588" Canvas.Left="65.7976" Canvas.Top="33.2116" Stretch="Fill" Fill="#FF000000" Data="F1 M 65.7976,35.4655L 66.4207,35.4655C 66.4207,35.6491 66.4675,35.7819 66.5515,35.873C 66.638,35.9668 66.7624,36.0123 66.9336,36.0123C 67.0977,36.0123 67.2253,35.972 67.3145,35.8808C 67.3979,35.8002 67.446,35.6778 67.446,35.515C 67.446,35.3535 67.3972,35.2324 67.2911,35.1516C 67.1869,35.071 67.0313,35.0267 66.7312,35.0292L 66.7312,34.5814L 66.8028,34.5814C 66.9896,34.5814 67.1276,34.545 67.2143,34.4739C 67.306,34.4023 67.3509,34.2896 67.3509,34.1347C 67.3509,34.0104 67.3145,33.9108 67.2364,33.8392C 67.1635,33.765 67.058,33.7272 66.9252,33.7272C 66.7839,33.7272 66.6719,33.7708 66.5912,33.8548C 66.5124,33.9388 66.4765,34.0599 66.4765,34.2155L 66.4765,34.2428L 65.8627,34.2428C 65.8672,33.9108 65.9668,33.6523 66.1583,33.4759C 66.3437,33.3014 66.6088,33.2116 66.9487,33.2116C 67.2787,33.2116 67.5359,33.2891 67.7247,33.4504C 67.9173,33.6094 68.0097,33.8242 68.0097,34.0904C 68.0097,34.2338 67.9824,34.3555 67.9128,34.4673C 67.8516,34.5735 67.7552,34.662 67.6237,34.7272C 67.7884,34.8002 67.9128,34.9016 67.9987,35.0292C 68.0815,35.1595 68.1283,35.3131 68.1283,35.4876C 68.1283,35.8131 68.0215,36.071 67.8099,36.2611C 67.5925,36.4538 67.3047,36.5475 66.9336,36.5475C 66.5677,36.5475 66.2877,36.4538 66.0892,36.2701C 65.8985,36.0839 65.7976,35.8183 65.7976,35.4772L 65.7976,35.4655 Z "/>
                                <Path Width="1.41797" Height="3.24799" Canvas.Left="48.8471" Canvas.Top="4.18164" Stretch="Fill" Fill="#FF000000" Data="F1 M 49.6264,7.42963L 49.6264,5.20697L 48.8471,5.20697L 48.8471,4.75323L 48.8985,4.75323C 49.1811,4.75323 49.388,4.70963 49.5189,4.61975C 49.6445,4.53189 49.7233,4.38803 49.7461,4.18164L 50.2651,4.18164L 50.2651,7.42963L 49.6264,7.42963 Z "/>
                                <Viewbox Width="4.75787" Height="3.33401" Canvas.Left="1.3952" Canvas.Top="17.6509">
                                    <Canvas Width="4.75787" Height="3.33401">
                                        <Path Width="1.41666" Height="3.25" Canvas.Left="0" Canvas.Top="0" Stretch="Fill" Fill="#FF000000" Data="F1 M 0.774124,3.25L 0.774124,1.02548L 0,1.02548L 0,0.571075L 0.0521393,0.571075C 0.330811,0.571075 0.538406,0.528015 0.666656,0.438293C 0.797607,0.351624 0.871063,0.206421 0.895874,0L 1.41666,0L 1.41666,3.25L 0.774124,3.25 Z "/>
                                        <Path Width="2.34842" Height="3.33401" Canvas.Left="2.40945" Canvas.Top="0" Stretch="Fill" Fill="#FF000000" Data="F1 M 2.40945,1.66803C 2.40945,1.10815 2.50854,0.694702 2.69667,0.414825C 2.89786,0.13681 3.18494,0 3.582,0C 3.97133,0 4.26627,0.140015 4.46228,0.414825C 4.65894,0.694702 4.75787,1.11536 4.75787,1.67136C 4.75787,2.23056 4.65894,2.64655 4.46228,2.92322C 4.27347,3.19736 3.97534,3.33401 3.582,3.33401C 3.18494,3.33401 2.89786,3.19736 2.69667,2.92068C 2.50854,2.64337 2.40945,2.22668 2.40945,1.66803 Z M 3.08467,1.66803C 3.08467,2.06256 3.12106,2.34842 3.20186,2.52869C 3.28253,2.70575 3.40826,2.79376 3.582,2.79376C 3.75587,2.79376 3.88026,2.70575 3.95906,2.52615C 4.04172,2.34509 4.08467,2.05936 4.08467,1.66803C 4.08467,1.27802 4.04172,0.989624 3.95906,0.813232C 3.88026,0.630951 3.75587,0.540405 3.582,0.540405C 3.40826,0.540405 3.28253,0.630951 3.20186,0.810028C 3.12106,0.989624 3.08467,1.27481 3.08467,1.66803 Z "/>
                                    </Canvas>
                                </Viewbox>
                                <Viewbox Width="4.05081" Height="3.24799" Canvas.Left="14.3209" Canvas.Top="4.18164">
                                    <Canvas Width="4.05081" Height="3.24799">
                                        <Path Width="1.41798" Height="3.24799" Canvas.Left="0" Canvas.Top="0" Stretch="Fill" Fill="#FF000000" Data="F1 M 0.775467,3.24799L 0.775467,1.02533L 0,1.02533L 0,0.571594L 0.0541382,0.571594C 0.331467,0.571594 0.538528,0.527985 0.673203,0.43811C 0.798935,0.35025 0.872391,0.20639 0.899185,0L 1.41798,0L 1.41798,3.24799L 0.775467,3.24799 Z "/>
                                        <Path Width="1.416" Height="3.24799" Canvas.Left="2.63481" Canvas.Top="0" Stretch="Fill" Fill="#FF000000" Data="F1 M 3.41092,3.24799L 3.41092,1.02533L 2.63481,1.02533L 2.63481,0.571594L 2.68427,0.571594C 2.96747,0.571594 3.17587,0.527985 3.30347,0.43811C 3.43106,0.35025 3.50986,0.20639 3.52798,0L 4.05081,0L 4.05081,3.24799L 3.41092,3.24799 Z "/>
                                    </Canvas>
                                </Viewbox>
                                <Path Width="2.32678" Height="3.24866" Canvas.Left="49.7624" Canvas.Top="62.3327" Stretch="Fill" Fill="#FF000000" Data="F1 M 49.7624,64.6152L 50.3965,64.6152C 50.4056,64.7546 50.4544,64.8678 50.5384,64.9447C 50.6244,65.0254 50.7376,65.0592 50.879,65.0592C 51.0573,65.0592 51.1895,65.0059 51.2832,64.9095C 51.3751,64.8054 51.4212,64.6595 51.4212,64.4655C 51.4212,64.2844 51.3731,64.1412 51.2767,64.0396C 51.1817,63.9382 51.0501,63.8835 50.8848,63.8835C 50.7884,63.8835 50.7064,63.903 50.6393,63.9407C 50.5619,63.9798 50.504,64.0344 50.4544,64.1074L 49.8705,64.0775L 50.082,62.3327L 51.948,62.3327L 51.948,62.8835L 50.5384,62.8835L 50.4544,63.5332C 50.5261,63.4772 50.6081,63.433 50.6999,63.4056C 50.7931,63.3783 50.8939,63.3652 51.0072,63.3652C 51.3295,63.3652 51.5925,63.4616 51.7911,63.6568C 51.9903,63.8522 52.0892,64.1139 52.0892,64.4303C 52.0892,64.7819 51.9819,65.0592 51.7585,65.2636C 51.5397,65.4759 51.2455,65.5814 50.879,65.5814C 50.5431,65.5814 50.2761,65.498 50.0768,65.321C 49.8776,65.1491 49.7702,64.9134 49.7624,64.6152 Z "/>
                                <Path Width="2.29825" Height="3.15491" Canvas.Left="15.4987" Canvas.Top="62.3327" Stretch="Fill" Fill="#FF000000" Data="F1 M 16.64,65.4876L 15.9636,65.4876C 15.9857,65.0475 16.0931,64.6022 16.2813,64.1672C 16.472,63.7376 16.7429,63.3054 17.0951,62.8887L 15.4987,62.8887L 15.4987,62.3327L 17.7969,62.3327L 17.7969,62.8183C 17.4433,63.209 17.1719,63.6283 16.976,64.0683C 16.7877,64.5059 16.6745,64.9784 16.64,65.4876 Z "/>
                                <Path Width="2.30469" Height="3.25" Canvas.Left="62.1387" Canvas.Top="17.6509" Stretch="Fill" Fill="#FF000000" Data="F1 M 62.1387,20.9009C 62.14,20.6087 62.2019,20.36 62.3249,20.1615C 62.446,19.9563 62.6608,19.7539 62.9681,19.5455C 63.013,19.5111 63.0833,19.4714 63.1745,19.4147C 63.582,19.1504 63.7832,18.8991 63.7832,18.6602C 63.7832,18.515 63.7435,18.4016 63.6556,18.319C 63.5716,18.235 63.4512,18.1913 63.3008,18.1913C 63.1387,18.1913 63.0117,18.2467 62.9232,18.3456C 62.8373,18.4518 62.7911,18.5976 62.7911,18.7826L 62.7911,18.8092L 62.1908,18.8092C 62.1908,18.4407 62.2924,18.1556 62.4889,17.9511C 62.6882,17.75 62.9747,17.6509 63.3457,17.6509C 63.6752,17.6509 63.946,17.7408 64.1445,17.9244C 64.3437,18.1067 64.4433,18.3456 64.4433,18.6491C 64.4433,18.8666 64.3939,19.0547 64.2877,19.2148C 64.1804,19.3749 63.9819,19.552 63.6829,19.7539C 63.6179,19.8002 63.53,19.856 63.4187,19.9278C 63.1328,20.1087 62.9747,20.2487 62.9376,20.3444L 64.4122,20.3444L 64.4122,20.9009L 62.1387,20.9009 Z "/>
                                <Path Width="2.336" Height="3.34372" Canvas.Left="3.26826" Canvas.Top="48.5371" Stretch="Fill" Fill="#FF000000" Data="F1 M 3.74226,50.0814C 3.60547,50.0005 3.51039,49.9172 3.446,49.8144C 3.3868,49.7155 3.35681,49.5839 3.35681,49.4225C 3.35681,49.1464 3.45508,48.9316 3.64655,48.7688C 3.832,48.6114 4.09706,48.5371 4.43361,48.5371C 4.7748,48.5371 5.0372,48.6114 5.22853,48.7688C 5.41733,48.929 5.51559,49.1464 5.51559,49.4225C 5.51559,49.5787 5.48187,49.7051 5.41733,49.8144C 5.35426,49.9264 5.25587,50.0136 5.1264,50.0814C 5.28253,50.1543 5.39906,50.2559 5.48373,50.3887C 5.56253,50.5136 5.60426,50.6751 5.60426,50.8652C 5.60426,51.179 5.49747,51.4278 5.29041,51.6074C 5.08333,51.7923 4.79626,51.8808 4.43361,51.8808C 4.06119,51.8808 3.77667,51.7923 3.57161,51.6114C 3.36653,51.4303 3.26826,51.183 3.26826,50.8652C 3.26826,50.6778 3.30214,50.524 3.38161,50.3964C 3.4584,50.2715 3.5788,50.166 3.74226,50.0814 Z M 3.92386,50.8392C 3.92386,51.0019 3.97079,51.123 4.05667,51.2103C 4.14655,51.2975 4.27213,51.3339 4.4388,51.3339C 4.59506,51.3339 4.7168,51.2975 4.80667,51.2076C 4.89853,51.1178 4.94081,51.0019 4.94081,50.8392C 4.94081,50.6934 4.89719,50.5735 4.80347,50.4798C 4.71094,50.3887 4.5912,50.3418 4.4388,50.3418C 4.2832,50.3418 4.16212,50.3887 4.06708,50.4824C 3.97079,50.5762 3.92386,50.6985 3.92386,50.8392 Z M 3.9772,49.4485C 3.9772,49.5787 4.01694,49.6712 4.09706,49.7402C 4.17453,49.8054 4.2832,49.8392 4.43361,49.8392C 4.58014,49.8392 4.69214,49.8054 4.7748,49.7376C 4.84961,49.6685 4.89133,49.5723 4.89133,49.4485C 4.89133,49.3287 4.84961,49.2363 4.76894,49.162C 4.68759,49.097 4.57361,49.0579 4.43361,49.0579C 4.29306,49.0579 4.18227,49.097 4.10159,49.1647C 4.01694,49.2363 3.9772,49.3327 3.9772,49.4485 Z "/>
                                <Path Width="2.38214" Height="3.1524" Canvas.Left="61.9037" Canvas.Top="48.6295" Stretch="Fill" Fill="#FF000000" Data="F1 M 63.2728,51.7819L 63.2728,51.0892L 61.9037,51.0892L 61.9037,50.5136L 63.0989,48.6295L 63.9069,48.6295L 63.9069,50.571L 64.2859,50.571L 64.2859,51.0892L 63.9069,51.0892L 63.9069,51.7819L 63.2728,51.7819 Z M 63.2877,50.5827L 63.2877,49.1959L 62.4043,50.5827L 63.2877,50.5827 Z "/>
                            </Canvas>
                        </Viewbox>
                        <Path Width="3.34894" Height="25.334" Canvas.Left="41.0052" Canvas.Top="21.5905" Stretch="Fill" Fill="#FF3A424F" Data="F1 M 41.0052,46.9245L 42.6783,21.5905L 44.3541,46.9245L 41.0052,46.9245 Z "/>
                        <Path Width="35.9264" Height="1.78708" Canvas.Left="35.274" Canvas.Top="41.4381" Stretch="Fill" Fill="#FF3A424F" Data="F1 M 35.274,41.4381L 71.2004,42.3333L 35.274,43.2252L 35.274,41.4381 Z "/>
                        <Path Width="26.0396" Height="26.0416" Canvas.Left="37.6725" Canvas.Top="37.6303" Stretch="Fill" Fill="#FFFDB65C" Data="F1 M 38.9355,37.6303L 63.7121,63.6719L 37.6725,38.8945L 38.9355,37.6303 Z "/>
                        <Path Width="7.04358" Height="7.04428" Canvas.Left="38.944" Canvas.Top="38.9415" Stretch="Fill" Fill="#FF3A424F" Data="F1 M 45.9876,42.4609C 45.9876,44.4088 44.4113,45.9857 42.4628,45.9857C 40.5208,45.9857 38.944,44.4088 38.944,42.4609C 38.944,40.5176 40.5208,38.9415 42.4628,38.9415C 44.4113,38.9415 45.9876,40.5176 45.9876,42.4609 Z "/>
                    </Canvas>
                </Viewbox>
            </Grid>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Border Background="{DynamicResource BrushOrange}" CornerRadius="15,0,0,15" Grid.ColumnSpan="2"/>
                <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Collapsed"/>
                <Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="5,0" VerticalAlignment="Center">
                    <Viewbox Height="Auto" Margin="0,1,0,0" Width="15" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform">
                        <Path x:Name="Arrow" Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z" Fill="{DynamicResource BrushWhiteForm}"/>
                    </Viewbox>
                </Grid>
                <Viewbox Width="24" Height="24" Margin="5,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center">
                    <Canvas Width="84.9309" Height="84.9271">
                        <Path Width="84.9309" Height="84.9271" Canvas.Left="0" Canvas.Top="0" Stretch="Fill" Fill="#FF252934" Data="F1 M 84.9309,42.4609C 84.9309,65.9153 65.9185,84.9271 42.4628,84.9271C 19.0097,84.9271 0,65.9153 0,42.4609C 0,19.0091 19.0097,0 42.4628,0C 65.9185,0 84.9309,19.0091 84.9309,42.4609 Z "/>
                        <Path Width="78.4004" Height="78.4004" Canvas.Left="3.26561" Canvas.Top="3.26373" Stretch="Fill" Fill="#FFFFFFFF" Data="F1 M 81.666,42.4609C 81.666,64.1093 64.1177,81.6642 42.4628,81.6642C 20.8157,81.6642 3.26561,64.1093 3.26561,42.4609C 3.26561,20.8144 20.8157,3.26373 42.4628,3.26373C 64.1177,3.26373 81.666,20.8144 81.666,42.4609 Z "/>
                        <Viewbox Width="68.1283" Height="70.0215" Canvas.Left="8.4016" Canvas.Top="7.45251">
                            <Canvas Width="68.1283" Height="70.0215">
                                <Viewbox Width="4.68109" Height="3.24869" Canvas.Left="31.7435" Canvas.Top="0">
                                    <Canvas Width="4.68109" Height="3.24869">
                                        <Path Width="1.41614" Height="3.24869" Canvas.Left="0" Canvas.Top="0" Stretch="Fill" Fill="#FF000000" Data="F1 M 0.775482,3.24869L 0.775482,1.02924L 0,1.02924L 0,0.572296L 0.0508118,0.572296C 0.334015,0.572296 0.542419,0.528015 0.670013,0.441345C 0.797607,0.353485 0.870544,0.205078 0.896545,0L 1.41614,0L 1.41614,3.24869L 0.775482,3.24869 Z "/>
                                        <Path Width="2.30402" Height="3.24869" Canvas.Left="2.37708" Canvas.Top="0" Stretch="Fill" Fill="#FF000000" Data="F1 M 2.37708,3.24869C 2.37762,2.95895 2.44214,2.71094 2.56256,2.51044C 2.68628,2.30856 2.89789,2.10284 3.2084,1.89642C 3.25336,1.86523 3.32175,1.82028 3.40826,1.76563C 3.81708,1.50122 4.02216,1.25 4.02216,1.00909C 4.02216,0.865906 3.97467,0.753906 3.89069,0.669891C 3.80347,0.585876 3.68829,0.547485 3.53906,0.547485C 3.37762,0.547485 3.25,0.596283 3.16028,0.698547C 3.07175,0.80069 3.02747,0.946533 3.02747,1.1347L 3.02747,1.1615L 2.43295,1.1615C 2.43295,0.791626 2.53003,0.505219 2.72922,0.301361C 2.92841,0.0982666 3.21429,0 3.58401,0C 3.91736,0 4.18359,0.0917664 4.37961,0.273376C 4.58215,0.456299 4.68109,0.698547 4.68109,1.00256C 4.68109,1.21735 4.63028,1.40363 4.52161,1.56378C 4.42068,1.72202 4.22333,1.90363 3.92136,2.10483C 3.85815,2.14975 3.76761,2.20697 3.65762,2.28058C 3.37189,2.45963 3.21429,2.60217 3.17654,2.69522L 4.64923,2.69522L 4.64923,3.24869L 2.37708,3.24869 Z "/>
                                    </Canvas>
                                </Viewbox>
                                <Path Width="2.35028" Height="3.34509" Canvas.Left="0" Canvas.Top="33.2051" Stretch="Fill" Fill="#FF000000" Data="F1 M 1.67067,35.1816C 1.5912,35.2571 1.50453,35.3158 1.40108,35.3535C 1.2988,35.386 1.17975,35.4095 1.05414,35.4095C 0.735062,35.4095 0.477859,35.3131 0.283875,35.1204C 0.0977325,34.9278 0,34.6699 0,34.3489C 0,34.0039 0.104263,33.7304 0.313202,33.5222C 0.520935,33.3105 0.797607,33.2051 1.13747,33.2051C 1.53387,33.2051 1.83534,33.345 2.04041,33.6159C 2.2468,33.8854 2.35028,34.2871 2.35028,34.8079C 2.35028,35.3718 2.23761,35.804 2.02213,36.1022C 1.79947,36.3964 1.4812,36.5502 1.06573,36.5502C 0.781326,36.5502 0.553467,36.4745 0.377594,36.3262C 0.19986,36.1803 0.104263,35.9784 0.0866699,35.7194L 0.741592,35.7194C 0.757874,35.8262 0.797607,35.9068 0.867203,35.9563C 0.932266,36.0059 1.02414,36.0305 1.14655,36.0305C 1.31119,36.0305 1.43692,35.9628 1.51961,35.8183C 1.60681,35.6778 1.65627,35.4655 1.67067,35.1816 Z M 1.65761,34.3365C 1.65761,34.1497 1.60947,34.0005 1.51694,33.8946C 1.42386,33.7896 1.2988,33.7304 1.13747,33.7304C 0.986404,33.7304 0.867203,33.7864 0.787201,33.8854C 0.700531,33.9948 0.661469,34.1374 0.661469,34.3275C 0.661469,34.5012 0.700531,34.6387 0.790405,34.7376C 0.878265,34.8339 1.004,34.8835 1.16013,34.8835C 1.31641,34.8835 1.43692,34.8365 1.52802,34.7402C 1.61134,34.6439 1.65761,34.5084 1.65761,34.3365 Z "/>
                                <Path Width="2.34506" Height="3.34256" Canvas.Left="32.8444" Canvas.Top="66.679" Stretch="Fill" Fill="#FF000000" Data="F1 M 33.5215,68.0436C 33.5931,67.9694 33.6863,67.916 33.7891,67.873C 33.8945,67.8352 34.0079,67.8131 34.1407,67.8131C 34.4544,67.8131 34.7097,67.916 34.8985,68.1087C 35.0944,68.2988 35.1895,68.5592 35.1895,68.8808C 35.1895,69.222 35.082,69.4954 34.8783,69.7063C 34.6648,69.9172 34.392,70.0215 34.0488,70.0215C 33.6556,70.0215 33.3575,69.8835 33.1517,69.6125C 32.9433,69.3431 32.8444,68.9459 32.8444,68.4199C 32.8444,67.8574 32.9519,67.4225 33.1693,67.1256C 33.3913,66.8248 33.7077,66.679 34.1205,66.679C 34.4101,66.679 34.6341,66.7505 34.8152,66.903C 34.9903,67.0527 35.0867,67.2532 35.1048,67.5084L 34.4447,67.5084C 34.4329,67.4068 34.392,67.3287 34.3236,67.2727C 34.2572,67.2194 34.1653,67.1947 34.0436,67.1947C 33.8821,67.1947 33.7545,67.2663 33.6707,67.4068C 33.582,67.5461 33.532,67.7611 33.5215,68.0436 Z M 33.53,68.8951C 33.53,69.0787 33.5775,69.2245 33.6707,69.3339C 33.7624,69.442 33.8893,69.4954 34.0488,69.4954C 34.1999,69.4954 34.3164,69.4459 34.4011,69.3431C 34.4851,69.2298 34.5287,69.0852 34.5287,68.8991C 34.5287,68.718 34.4851,68.5879 34.3952,68.4902C 34.306,68.3951 34.1856,68.3444 34.028,68.3444C 33.8711,68.3444 33.7487,68.3951 33.6628,68.4902C 33.5749,68.5879 33.53,68.718 33.53,68.8951 Z "/>
                                <Path Width="2.33069" Height="3.33588" Canvas.Left="65.7976" Canvas.Top="33.2116" Stretch="Fill" Fill="#FF000000" Data="F1 M 65.7976,35.4655L 66.4207,35.4655C 66.4207,35.6491 66.4675,35.7819 66.5515,35.873C 66.638,35.9668 66.7624,36.0123 66.9336,36.0123C 67.0977,36.0123 67.2253,35.972 67.3145,35.8808C 67.3979,35.8002 67.446,35.6778 67.446,35.515C 67.446,35.3535 67.3972,35.2324 67.2911,35.1516C 67.1869,35.071 67.0313,35.0267 66.7312,35.0292L 66.7312,34.5814L 66.8028,34.5814C 66.9896,34.5814 67.1276,34.545 67.2143,34.4739C 67.306,34.4023 67.3509,34.2896 67.3509,34.1347C 67.3509,34.0104 67.3145,33.9108 67.2364,33.8392C 67.1635,33.765 67.058,33.7272 66.9252,33.7272C 66.7839,33.7272 66.6719,33.7708 66.5912,33.8548C 66.5124,33.9388 66.4765,34.0599 66.4765,34.2155L 66.4765,34.2428L 65.8627,34.2428C 65.8672,33.9108 65.9668,33.6523 66.1583,33.4759C 66.3437,33.3014 66.6088,33.2116 66.9487,33.2116C 67.2787,33.2116 67.5359,33.2891 67.7247,33.4504C 67.9173,33.6094 68.0097,33.8242 68.0097,34.0904C 68.0097,34.2338 67.9824,34.3555 67.9128,34.4673C 67.8516,34.5735 67.7552,34.662 67.6237,34.7272C 67.7884,34.8002 67.9128,34.9016 67.9987,35.0292C 68.0815,35.1595 68.1283,35.3131 68.1283,35.4876C 68.1283,35.8131 68.0215,36.071 67.8099,36.2611C 67.5925,36.4538 67.3047,36.5475 66.9336,36.5475C 66.5677,36.5475 66.2877,36.4538 66.0892,36.2701C 65.8985,36.0839 65.7976,35.8183 65.7976,35.4772L 65.7976,35.4655 Z "/>
                                <Path Width="1.41797" Height="3.24799" Canvas.Left="48.8471" Canvas.Top="4.18164" Stretch="Fill" Fill="#FF000000" Data="F1 M 49.6264,7.42963L 49.6264,5.20697L 48.8471,5.20697L 48.8471,4.75323L 48.8985,4.75323C 49.1811,4.75323 49.388,4.70963 49.5189,4.61975C 49.6445,4.53189 49.7233,4.38803 49.7461,4.18164L 50.2651,4.18164L 50.2651,7.42963L 49.6264,7.42963 Z "/>
                                <Viewbox Width="4.75787" Height="3.33401" Canvas.Left="1.3952" Canvas.Top="17.6509">
                                    <Canvas Width="4.75787" Height="3.33401">
                                        <Path Width="1.41666" Height="3.25" Canvas.Left="0" Canvas.Top="0" Stretch="Fill" Fill="#FF000000" Data="F1 M 0.774124,3.25L 0.774124,1.02548L 0,1.02548L 0,0.571075L 0.0521393,0.571075C 0.330811,0.571075 0.538406,0.528015 0.666656,0.438293C 0.797607,0.351624 0.871063,0.206421 0.895874,0L 1.41666,0L 1.41666,3.25L 0.774124,3.25 Z "/>
                                        <Path Width="2.34842" Height="3.33401" Canvas.Left="2.40945" Canvas.Top="0" Stretch="Fill" Fill="#FF000000" Data="F1 M 2.40945,1.66803C 2.40945,1.10815 2.50854,0.694702 2.69667,0.414825C 2.89786,0.13681 3.18494,0 3.582,0C 3.97133,0 4.26627,0.140015 4.46228,0.414825C 4.65894,0.694702 4.75787,1.11536 4.75787,1.67136C 4.75787,2.23056 4.65894,2.64655 4.46228,2.92322C 4.27347,3.19736 3.97534,3.33401 3.582,3.33401C 3.18494,3.33401 2.89786,3.19736 2.69667,2.92068C 2.50854,2.64337 2.40945,2.22668 2.40945,1.66803 Z M 3.08467,1.66803C 3.08467,2.06256 3.12106,2.34842 3.20186,2.52869C 3.28253,2.70575 3.40826,2.79376 3.582,2.79376C 3.75587,2.79376 3.88026,2.70575 3.95906,2.52615C 4.04172,2.34509 4.08467,2.05936 4.08467,1.66803C 4.08467,1.27802 4.04172,0.989624 3.95906,0.813232C 3.88026,0.630951 3.75587,0.540405 3.582,0.540405C 3.40826,0.540405 3.28253,0.630951 3.20186,0.810028C 3.12106,0.989624 3.08467,1.27481 3.08467,1.66803 Z "/>
                                    </Canvas>
                                </Viewbox>
                                <Viewbox Width="4.05081" Height="3.24799" Canvas.Left="14.3209" Canvas.Top="4.18164">
                                    <Canvas Width="4.05081" Height="3.24799">
                                        <Path Width="1.41798" Height="3.24799" Canvas.Left="0" Canvas.Top="0" Stretch="Fill" Fill="#FF000000" Data="F1 M 0.775467,3.24799L 0.775467,1.02533L 0,1.02533L 0,0.571594L 0.0541382,0.571594C 0.331467,0.571594 0.538528,0.527985 0.673203,0.43811C 0.798935,0.35025 0.872391,0.20639 0.899185,0L 1.41798,0L 1.41798,3.24799L 0.775467,3.24799 Z "/>
                                        <Path Width="1.416" Height="3.24799" Canvas.Left="2.63481" Canvas.Top="0" Stretch="Fill" Fill="#FF000000" Data="F1 M 3.41092,3.24799L 3.41092,1.02533L 2.63481,1.02533L 2.63481,0.571594L 2.68427,0.571594C 2.96747,0.571594 3.17587,0.527985 3.30347,0.43811C 3.43106,0.35025 3.50986,0.20639 3.52798,0L 4.05081,0L 4.05081,3.24799L 3.41092,3.24799 Z "/>
                                    </Canvas>
                                </Viewbox>
                                <Path Width="2.32678" Height="3.24866" Canvas.Left="49.7624" Canvas.Top="62.3327" Stretch="Fill" Fill="#FF000000" Data="F1 M 49.7624,64.6152L 50.3965,64.6152C 50.4056,64.7546 50.4544,64.8678 50.5384,64.9447C 50.6244,65.0254 50.7376,65.0592 50.879,65.0592C 51.0573,65.0592 51.1895,65.0059 51.2832,64.9095C 51.3751,64.8054 51.4212,64.6595 51.4212,64.4655C 51.4212,64.2844 51.3731,64.1412 51.2767,64.0396C 51.1817,63.9382 51.0501,63.8835 50.8848,63.8835C 50.7884,63.8835 50.7064,63.903 50.6393,63.9407C 50.5619,63.9798 50.504,64.0344 50.4544,64.1074L 49.8705,64.0775L 50.082,62.3327L 51.948,62.3327L 51.948,62.8835L 50.5384,62.8835L 50.4544,63.5332C 50.5261,63.4772 50.6081,63.433 50.6999,63.4056C 50.7931,63.3783 50.8939,63.3652 51.0072,63.3652C 51.3295,63.3652 51.5925,63.4616 51.7911,63.6568C 51.9903,63.8522 52.0892,64.1139 52.0892,64.4303C 52.0892,64.7819 51.9819,65.0592 51.7585,65.2636C 51.5397,65.4759 51.2455,65.5814 50.879,65.5814C 50.5431,65.5814 50.2761,65.498 50.0768,65.321C 49.8776,65.1491 49.7702,64.9134 49.7624,64.6152 Z "/>
                                <Path Width="2.29825" Height="3.15491" Canvas.Left="15.4987" Canvas.Top="62.3327" Stretch="Fill" Fill="#FF000000" Data="F1 M 16.64,65.4876L 15.9636,65.4876C 15.9857,65.0475 16.0931,64.6022 16.2813,64.1672C 16.472,63.7376 16.7429,63.3054 17.0951,62.8887L 15.4987,62.8887L 15.4987,62.3327L 17.7969,62.3327L 17.7969,62.8183C 17.4433,63.209 17.1719,63.6283 16.976,64.0683C 16.7877,64.5059 16.6745,64.9784 16.64,65.4876 Z "/>
                                <Path Width="2.30469" Height="3.25" Canvas.Left="62.1387" Canvas.Top="17.6509" Stretch="Fill" Fill="#FF000000" Data="F1 M 62.1387,20.9009C 62.14,20.6087 62.2019,20.36 62.3249,20.1615C 62.446,19.9563 62.6608,19.7539 62.9681,19.5455C 63.013,19.5111 63.0833,19.4714 63.1745,19.4147C 63.582,19.1504 63.7832,18.8991 63.7832,18.6602C 63.7832,18.515 63.7435,18.4016 63.6556,18.319C 63.5716,18.235 63.4512,18.1913 63.3008,18.1913C 63.1387,18.1913 63.0117,18.2467 62.9232,18.3456C 62.8373,18.4518 62.7911,18.5976 62.7911,18.7826L 62.7911,18.8092L 62.1908,18.8092C 62.1908,18.4407 62.2924,18.1556 62.4889,17.9511C 62.6882,17.75 62.9747,17.6509 63.3457,17.6509C 63.6752,17.6509 63.946,17.7408 64.1445,17.9244C 64.3437,18.1067 64.4433,18.3456 64.4433,18.6491C 64.4433,18.8666 64.3939,19.0547 64.2877,19.2148C 64.1804,19.3749 63.9819,19.552 63.6829,19.7539C 63.6179,19.8002 63.53,19.856 63.4187,19.9278C 63.1328,20.1087 62.9747,20.2487 62.9376,20.3444L 64.4122,20.3444L 64.4122,20.9009L 62.1387,20.9009 Z "/>
                                <Path Width="2.336" Height="3.34372" Canvas.Left="3.26826" Canvas.Top="48.5371" Stretch="Fill" Fill="#FF000000" Data="F1 M 3.74226,50.0814C 3.60547,50.0005 3.51039,49.9172 3.446,49.8144C 3.3868,49.7155 3.35681,49.5839 3.35681,49.4225C 3.35681,49.1464 3.45508,48.9316 3.64655,48.7688C 3.832,48.6114 4.09706,48.5371 4.43361,48.5371C 4.7748,48.5371 5.0372,48.6114 5.22853,48.7688C 5.41733,48.929 5.51559,49.1464 5.51559,49.4225C 5.51559,49.5787 5.48187,49.7051 5.41733,49.8144C 5.35426,49.9264 5.25587,50.0136 5.1264,50.0814C 5.28253,50.1543 5.39906,50.2559 5.48373,50.3887C 5.56253,50.5136 5.60426,50.6751 5.60426,50.8652C 5.60426,51.179 5.49747,51.4278 5.29041,51.6074C 5.08333,51.7923 4.79626,51.8808 4.43361,51.8808C 4.06119,51.8808 3.77667,51.7923 3.57161,51.6114C 3.36653,51.4303 3.26826,51.183 3.26826,50.8652C 3.26826,50.6778 3.30214,50.524 3.38161,50.3964C 3.4584,50.2715 3.5788,50.166 3.74226,50.0814 Z M 3.92386,50.8392C 3.92386,51.0019 3.97079,51.123 4.05667,51.2103C 4.14655,51.2975 4.27213,51.3339 4.4388,51.3339C 4.59506,51.3339 4.7168,51.2975 4.80667,51.2076C 4.89853,51.1178 4.94081,51.0019 4.94081,50.8392C 4.94081,50.6934 4.89719,50.5735 4.80347,50.4798C 4.71094,50.3887 4.5912,50.3418 4.4388,50.3418C 4.2832,50.3418 4.16212,50.3887 4.06708,50.4824C 3.97079,50.5762 3.92386,50.6985 3.92386,50.8392 Z M 3.9772,49.4485C 3.9772,49.5787 4.01694,49.6712 4.09706,49.7402C 4.17453,49.8054 4.2832,49.8392 4.43361,49.8392C 4.58014,49.8392 4.69214,49.8054 4.7748,49.7376C 4.84961,49.6685 4.89133,49.5723 4.89133,49.4485C 4.89133,49.3287 4.84961,49.2363 4.76894,49.162C 4.68759,49.097 4.57361,49.0579 4.43361,49.0579C 4.29306,49.0579 4.18227,49.097 4.10159,49.1647C 4.01694,49.2363 3.9772,49.3327 3.9772,49.4485 Z "/>
                                <Path Width="2.38214" Height="3.1524" Canvas.Left="61.9037" Canvas.Top="48.6295" Stretch="Fill" Fill="#FF000000" Data="F1 M 63.2728,51.7819L 63.2728,51.0892L 61.9037,51.0892L 61.9037,50.5136L 63.0989,48.6295L 63.9069,48.6295L 63.9069,50.571L 64.2859,50.571L 64.2859,51.0892L 63.9069,51.0892L 63.9069,51.7819L 63.2728,51.7819 Z M 63.2877,50.5827L 63.2877,49.1959L 62.4043,50.5827L 63.2877,50.5827 Z "/>
                            </Canvas>
                        </Viewbox>
                        <Path Width="3.34894" Height="25.334" Canvas.Left="41.0052" Canvas.Top="21.5905" Stretch="Fill" Fill="#FF3A424F" Data="F1 M 41.0052,46.9245L 42.6783,21.5905L 44.3541,46.9245L 41.0052,46.9245 Z "/>
                        <Path Width="35.9264" Height="1.78708" Canvas.Left="35.274" Canvas.Top="41.4381" Stretch="Fill" Fill="#FF3A424F" Data="F1 M 35.274,41.4381L 71.2004,42.3333L 35.274,43.2252L 35.274,41.4381 Z "/>
                        <Path Width="26.0396" Height="26.0416" Canvas.Left="37.6725" Canvas.Top="37.6303" Stretch="Fill" Fill="#FFFDB65C" Data="F1 M 38.9355,37.6303L 63.7121,63.6719L 37.6725,38.8945L 38.9355,37.6303 Z "/>
                        <Path Width="7.04358" Height="7.04428" Canvas.Left="38.944" Canvas.Top="38.9415" Stretch="Fill" Fill="#FF3A424F" Data="F1 M 45.9876,42.4609C 45.9876,44.4088 44.4113,45.9857 42.4628,45.9857C 40.5208,45.9857 38.944,44.4088 38.944,42.4609C 38.944,40.5176 40.5208,38.9415 42.4628,38.9415C 44.4113,38.9415 45.9876,40.5176 45.9876,42.4609 Z "/>
                    </Canvas>
                </Viewbox>
            </Grid>
        </Grid>
    </ControlTemplate>
    <LinearGradientBrush x:Key="BrushGrey" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="White" Offset="0"/>
        <GradientStop Color="#FF919191" Offset="1"/>
    </LinearGradientBrush>
    <Style x:Key="ToolkitDateTimePickerStyle" TargetType="{x:Type xctk:DateTimePicker}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
        <Setter Property="BorderThickness" Value="1,1,0,1"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="TimeWatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False" Margin="0,0,3,0"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="WatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False" Margin="0,0,3,0"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:DateTimePicker}">
                    <Border>
                        <Grid>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <xctk:ButtonSpinner x:Name="PART_Spinner" AllowSpin="{TemplateBinding AllowSpin}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}" Background="{TemplateBinding Background}" HorizontalContentAlignment="Stretch" IsTabStop="False" ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}" VerticalContentAlignment="Stretch">
                                    <xctk:WatermarkTextBox x:Name="PART_TextBox" AcceptsReturn="False" BorderThickness="0" Background="Transparent" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsTabStop="{TemplateBinding IsTabStop}" IsUndoEnabled="True" MinWidth="20" Padding="{TemplateBinding Padding}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="NoWrap" Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" TabIndex="{TemplateBinding TabIndex}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" WatermarkTemplate="{TemplateBinding WatermarkTemplate}" Watermark="{TemplateBinding Watermark}"/>
                                </xctk:ButtonSpinner>
                                <ToggleButton x:Name="_calendarToggleButton" Background="White" Grid.Column="1" Focusable="False" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ToggleButton.IsHitTestVisible>
                                        <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <xctk:InverseBoolConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </ToggleButton.IsHitTestVisible>
                                    <ToggleButton.IsEnabled>
                                        <Binding Path="IsReadOnly" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <xctk:InverseBoolConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </ToggleButton.IsEnabled>
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Grid SnapsToDevicePixels="True">
                                                            <xctk:ButtonChrome x:Name="ToggleButtonChrome" CornerRadius="0" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:DateTimePicker}}}" RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:DateTimePicker}}}">
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition Width="*"/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch"/>
                                                                    <Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="5">
                                                                        <Path x:Name="Arrow" Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z" Fill="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" Height="5" Margin="0,1,0,0" Width="9"/>
                                                                    </Grid>
                                                                </Grid>
                                                            </xctk:ButtonChrome>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                    <ToggleButton.Visibility>
                                        <TemplateBinding Property="ShowDropDownButton">
                                            <TemplateBinding.Converter>
                                                <BooleanToVisibilityConverter/>
                                            </TemplateBinding.Converter>
                                        </TemplateBinding>
                                    </ToggleButton.Visibility>
                                </ToggleButton>
                            </Grid>
                            <Popup x:Name="PART_Popup" IsOpen="{Binding IsChecked, ElementName=_calendarToggleButton}" StaysOpen="False" ToolTip="">
                                <Popup.Resources>
                                    <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                        <Style.Triggers>
                                            <Trigger Property="Content" Value="">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Popup.Resources>
                                <Border BorderBrush="#FFABADB3" BorderThickness="1" Padding="3">
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                            <GradientStop Color="#FFF0F0F0" Offset="0"/>
                                            <GradientStop Color="#FFE5E5E5" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Border.Background>
                                    <StackPanel>
                                        <Calendar x:Name="PART_Calendar" BorderThickness="0" DisplayMode="{Binding CalendarDisplayMode, RelativeSource={RelativeSource TemplatedParent}}" DisplayDate="2017-04-24"/>
                                        <xctk:TimePicker x:Name="PART_TimeUpDown" AllowSpin="{TemplateBinding TimePickerAllowSpin}" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" ClipValueToMinMax="{Binding ClipValueToMinMax, RelativeSource={RelativeSource TemplatedParent}}" Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" FormatString="{TemplateBinding TimeFormatString}" Format="{TemplateBinding TimeFormat}" IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}" Kind="{Binding Kind, RelativeSource={RelativeSource TemplatedParent}}" Maximum="{Binding Maximum, RelativeSource={RelativeSource TemplatedParent}}" Minimum="{Binding Minimum, RelativeSource={RelativeSource TemplatedParent}}" ShowButtonSpinner="{TemplateBinding TimePickerShowButtonSpinner}" Text="" Visibility="{TemplateBinding TimePickerVisibility}" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" WatermarkTemplate="{TemplateBinding TimeWatermarkTemplate}" Watermark="{TemplateBinding TimeWatermark}"/>
                                    </StackPanel>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlMouseOverBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True"/>
                        </DataTrigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="FocusManager.FocusedElement" TargetName="PART_TextBox" Value="{Binding ElementName=PART_TextBox}"/>
                        </Trigger>
                        <Trigger Property="UpdateValueOnEnterKey" Value="True">
                            <Setter Property="Value" TargetName="PART_TimeUpDown" Value="{Binding Value, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="ComboBox.Static.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF0F0F0" Offset="0.0"/>
        <GradientStop Color="#FFE5E5E5" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FFACACAC"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF000000"/>
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFECF4FC" Offset="0.0"/>
        <GradientStop Color="#FFDCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#FF7EB4EA"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#FF7EB4EA"/>
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFEBF4FC" Offset="0.0"/>
        <GradientStop Color="#FFDCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#FF7EB4EA"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF000000"/>
    <LinearGradientBrush x:Key="ComboBox.Pressed.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFDAECFC" Offset="0.0"/>
        <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#FF569DE5"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FF569DE5"/>
    <LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFDAEBFC" Offset="0.0"/>
        <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060"/>
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" SnapsToDevicePixels="true" Background="{DynamicResource BrushWhiteForm}" BorderBrush="{StaticResource ComboBox.Static.Border}" CornerRadius="15">
                        <Border x:Name="splitBorder" SnapsToDevicePixels="true" Margin="0,0,3,0" HorizontalAlignment="Right" BorderThickness="0" BorderBrush="Transparent" Width="20">
                            <Path x:Name="arrow" VerticalAlignment="Center" Margin="0" HorizontalAlignment="Center" Fill="{StaticResource ComboBox.Static.Glyph}" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
                            <Setter Property="Opacity" TargetName="templateRoot" Value="0.5"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                <Themes1:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes1:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="10,-2,0,0" VerticalAlignment="Top"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <SolidColorBrush x:Key="TextBox.Static.Background" Color="#FFFFFFFF"/>
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                <Themes1:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes1:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
            <Border x:Name="border" Background="{StaticResource TextBox.Static.Background}" Margin="{TemplateBinding BorderThickness}">
                <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ComboBoxStyleForm" TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ComboBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TimePickerStyleForm" TargetType="{x:Type xctk:TimePicker}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
        <Setter Property="BorderThickness" Value="1,1,0,1"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="WatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False" Margin="0,0,3,0"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:TimePicker}">
                    <Grid x:Name="root" Margin="0,0,0,10" Height="32">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <xctk:ButtonSpinner  Panel.ZIndex="12"  x:Name="PART_Spinner" AllowSpin="{TemplateBinding AllowSpin}" BorderBrush="{TemplateBinding BorderBrush}" ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}" Background="{TemplateBinding Background}" HorizontalContentAlignment="Stretch" IsTabStop="False" ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}" VerticalContentAlignment="Stretch" Style="{DynamicResource ButtonSpinnerStyleForm}" Grid.ColumnSpan="2" BorderThickness="0">
                            <xctk:WatermarkTextBox x:Name="PART_TextBox" AcceptsReturn="False" BorderThickness="0" Background="Transparent" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsTabStop="{TemplateBinding IsTabStop}" IsUndoEnabled="True" MinWidth="20" Padding="{TemplateBinding Padding}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="NoWrap" Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" TabIndex="{TemplateBinding TabIndex}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" WatermarkTemplate="{TemplateBinding WatermarkTemplate}" Watermark="{TemplateBinding Watermark}" Style="{DynamicResource WatermarkTextBoxStyleForm}"/>
                        </xctk:ButtonSpinner>
                        <ToggleButton  Panel.ZIndex="13"  x:Name="_timePickerToggleButton" Background="White" Grid.Column="0" Focusable="False" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}" TabIndex="2147483643">
                            <ToggleButton.IsHitTestVisible>
                                <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <xctk:InverseBoolConverter/>
                                    </Binding.Converter>
                                </Binding>
                            </ToggleButton.IsHitTestVisible>
                            <ToggleButton.IsEnabled>
                                <Binding Path="IsReadOnly" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <xctk:InverseBoolConverter/>
                                    </Binding.Converter>
                                </Binding>
                            </ToggleButton.IsEnabled>
                            <ToggleButton.Style>
                                <Style TargetType="{x:Type ToggleButton}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Grid SnapsToDevicePixels="True">
                                                    <xctk:ButtonChrome x:Name="ToggleButtonChrome" CornerRadius="0" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:TimePicker}}}" RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:TimePicker}}}" Background="{x:Null}" BorderBrush="{x:Null}" Style="{DynamicResource ButtonChromeStyleForm}">
                                                        <Grid>
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="*"/>
                                                                <ColumnDefinition Width="Auto"/>
                                                            </Grid.ColumnDefinitions>
                                                            <Border Background="{DynamicResource BrushOrange}" CornerRadius="15,0,0,15" Grid.ColumnSpan="2"></Border>
                                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch"/>
                                                            <Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="5,0" VerticalAlignment="Center">
                                                                <Viewbox Height="Auto" Margin="0,1,0,0" Width="15" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform">
                                                                    <Path x:Name="Arrow" Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z" Fill="{DynamicResource BrushWhiteForm}"/>
                                                                </Viewbox>
                                                            </Grid>
                                                            <Viewbox Width="24" Height="24" Margin="5,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center">
                                                                <Canvas Width="84.9309" Height="84.9271">
                                                                    <Path Width="84.9309" Height="84.9271" Canvas.Left="0" Canvas.Top="0" Stretch="Fill" Fill="#FF252934" Data="F1 M 84.9309,42.4609C 84.9309,65.9153 65.9185,84.9271 42.4628,84.9271C 19.0097,84.9271 0,65.9153 0,42.4609C 0,19.0091 19.0097,0 42.4628,0C 65.9185,0 84.9309,19.0091 84.9309,42.4609 Z "/>
                                                                    <Path Width="78.4004" Height="78.4004" Canvas.Left="3.26561" Canvas.Top="3.26373" Stretch="Fill" Fill="#FFFFFFFF" Data="F1 M 81.666,42.4609C 81.666,64.1093 64.1177,81.6642 42.4628,81.6642C 20.8157,81.6642 3.26561,64.1093 3.26561,42.4609C 3.26561,20.8144 20.8157,3.26373 42.4628,3.26373C 64.1177,3.26373 81.666,20.8144 81.666,42.4609 Z "/>
                                                                    <Viewbox Width="68.1283" Height="70.0215" Canvas.Left="8.4016" Canvas.Top="7.45251">
                                                                        <Canvas Width="68.1283" Height="70.0215">
                                                                            <Viewbox Width="4.68109" Height="3.24869" Canvas.Left="31.7435" Canvas.Top="0">
                                                                                <Canvas Width="4.68109" Height="3.24869">
                                                                                    <Path Width="1.41614" Height="3.24869" Canvas.Left="0" Canvas.Top="0" Stretch="Fill" Fill="#FF000000" Data="F1 M 0.775482,3.24869L 0.775482,1.02924L 0,1.02924L 0,0.572296L 0.0508118,0.572296C 0.334015,0.572296 0.542419,0.528015 0.670013,0.441345C 0.797607,0.353485 0.870544,0.205078 0.896545,0L 1.41614,0L 1.41614,3.24869L 0.775482,3.24869 Z "/>
                                                                                    <Path Width="2.30402" Height="3.24869" Canvas.Left="2.37708" Canvas.Top="0" Stretch="Fill" Fill="#FF000000" Data="F1 M 2.37708,3.24869C 2.37762,2.95895 2.44214,2.71094 2.56256,2.51044C 2.68628,2.30856 2.89789,2.10284 3.2084,1.89642C 3.25336,1.86523 3.32175,1.82028 3.40826,1.76563C 3.81708,1.50122 4.02216,1.25 4.02216,1.00909C 4.02216,0.865906 3.97467,0.753906 3.89069,0.669891C 3.80347,0.585876 3.68829,0.547485 3.53906,0.547485C 3.37762,0.547485 3.25,0.596283 3.16028,0.698547C 3.07175,0.80069 3.02747,0.946533 3.02747,1.1347L 3.02747,1.1615L 2.43295,1.1615C 2.43295,0.791626 2.53003,0.505219 2.72922,0.301361C 2.92841,0.0982666 3.21429,0 3.58401,0C 3.91736,0 4.18359,0.0917664 4.37961,0.273376C 4.58215,0.456299 4.68109,0.698547 4.68109,1.00256C 4.68109,1.21735 4.63028,1.40363 4.52161,1.56378C 4.42068,1.72202 4.22333,1.90363 3.92136,2.10483C 3.85815,2.14975 3.76761,2.20697 3.65762,2.28058C 3.37189,2.45963 3.21429,2.60217 3.17654,2.69522L 4.64923,2.69522L 4.64923,3.24869L 2.37708,3.24869 Z "/>
                                                                                </Canvas>
                                                                            </Viewbox>
                                                                            <Path Width="2.35028" Height="3.34509" Canvas.Left="0" Canvas.Top="33.2051" Stretch="Fill" Fill="#FF000000" Data="F1 M 1.67067,35.1816C 1.5912,35.2571 1.50453,35.3158 1.40108,35.3535C 1.2988,35.386 1.17975,35.4095 1.05414,35.4095C 0.735062,35.4095 0.477859,35.3131 0.283875,35.1204C 0.0977325,34.9278 0,34.6699 0,34.3489C 0,34.0039 0.104263,33.7304 0.313202,33.5222C 0.520935,33.3105 0.797607,33.2051 1.13747,33.2051C 1.53387,33.2051 1.83534,33.345 2.04041,33.6159C 2.2468,33.8854 2.35028,34.2871 2.35028,34.8079C 2.35028,35.3718 2.23761,35.804 2.02213,36.1022C 1.79947,36.3964 1.4812,36.5502 1.06573,36.5502C 0.781326,36.5502 0.553467,36.4745 0.377594,36.3262C 0.19986,36.1803 0.104263,35.9784 0.0866699,35.7194L 0.741592,35.7194C 0.757874,35.8262 0.797607,35.9068 0.867203,35.9563C 0.932266,36.0059 1.02414,36.0305 1.14655,36.0305C 1.31119,36.0305 1.43692,35.9628 1.51961,35.8183C 1.60681,35.6778 1.65627,35.4655 1.67067,35.1816 Z M 1.65761,34.3365C 1.65761,34.1497 1.60947,34.0005 1.51694,33.8946C 1.42386,33.7896 1.2988,33.7304 1.13747,33.7304C 0.986404,33.7304 0.867203,33.7864 0.787201,33.8854C 0.700531,33.9948 0.661469,34.1374 0.661469,34.3275C 0.661469,34.5012 0.700531,34.6387 0.790405,34.7376C 0.878265,34.8339 1.004,34.8835 1.16013,34.8835C 1.31641,34.8835 1.43692,34.8365 1.52802,34.7402C 1.61134,34.6439 1.65761,34.5084 1.65761,34.3365 Z "/>
                                                                            <Path Width="2.34506" Height="3.34256" Canvas.Left="32.8444" Canvas.Top="66.679" Stretch="Fill" Fill="#FF000000" Data="F1 M 33.5215,68.0436C 33.5931,67.9694 33.6863,67.916 33.7891,67.873C 33.8945,67.8352 34.0079,67.8131 34.1407,67.8131C 34.4544,67.8131 34.7097,67.916 34.8985,68.1087C 35.0944,68.2988 35.1895,68.5592 35.1895,68.8808C 35.1895,69.222 35.082,69.4954 34.8783,69.7063C 34.6648,69.9172 34.392,70.0215 34.0488,70.0215C 33.6556,70.0215 33.3575,69.8835 33.1517,69.6125C 32.9433,69.3431 32.8444,68.9459 32.8444,68.4199C 32.8444,67.8574 32.9519,67.4225 33.1693,67.1256C 33.3913,66.8248 33.7077,66.679 34.1205,66.679C 34.4101,66.679 34.6341,66.7505 34.8152,66.903C 34.9903,67.0527 35.0867,67.2532 35.1048,67.5084L 34.4447,67.5084C 34.4329,67.4068 34.392,67.3287 34.3236,67.2727C 34.2572,67.2194 34.1653,67.1947 34.0436,67.1947C 33.8821,67.1947 33.7545,67.2663 33.6707,67.4068C 33.582,67.5461 33.532,67.7611 33.5215,68.0436 Z M 33.53,68.8951C 33.53,69.0787 33.5775,69.2245 33.6707,69.3339C 33.7624,69.442 33.8893,69.4954 34.0488,69.4954C 34.1999,69.4954 34.3164,69.4459 34.4011,69.3431C 34.4851,69.2298 34.5287,69.0852 34.5287,68.8991C 34.5287,68.718 34.4851,68.5879 34.3952,68.4902C 34.306,68.3951 34.1856,68.3444 34.028,68.3444C 33.8711,68.3444 33.7487,68.3951 33.6628,68.4902C 33.5749,68.5879 33.53,68.718 33.53,68.8951 Z "/>
                                                                            <Path Width="2.33069" Height="3.33588" Canvas.Left="65.7976" Canvas.Top="33.2116" Stretch="Fill" Fill="#FF000000" Data="F1 M 65.7976,35.4655L 66.4207,35.4655C 66.4207,35.6491 66.4675,35.7819 66.5515,35.873C 66.638,35.9668 66.7624,36.0123 66.9336,36.0123C 67.0977,36.0123 67.2253,35.972 67.3145,35.8808C 67.3979,35.8002 67.446,35.6778 67.446,35.515C 67.446,35.3535 67.3972,35.2324 67.2911,35.1516C 67.1869,35.071 67.0313,35.0267 66.7312,35.0292L 66.7312,34.5814L 66.8028,34.5814C 66.9896,34.5814 67.1276,34.545 67.2143,34.4739C 67.306,34.4023 67.3509,34.2896 67.3509,34.1347C 67.3509,34.0104 67.3145,33.9108 67.2364,33.8392C 67.1635,33.765 67.058,33.7272 66.9252,33.7272C 66.7839,33.7272 66.6719,33.7708 66.5912,33.8548C 66.5124,33.9388 66.4765,34.0599 66.4765,34.2155L 66.4765,34.2428L 65.8627,34.2428C 65.8672,33.9108 65.9668,33.6523 66.1583,33.4759C 66.3437,33.3014 66.6088,33.2116 66.9487,33.2116C 67.2787,33.2116 67.5359,33.2891 67.7247,33.4504C 67.9173,33.6094 68.0097,33.8242 68.0097,34.0904C 68.0097,34.2338 67.9824,34.3555 67.9128,34.4673C 67.8516,34.5735 67.7552,34.662 67.6237,34.7272C 67.7884,34.8002 67.9128,34.9016 67.9987,35.0292C 68.0815,35.1595 68.1283,35.3131 68.1283,35.4876C 68.1283,35.8131 68.0215,36.071 67.8099,36.2611C 67.5925,36.4538 67.3047,36.5475 66.9336,36.5475C 66.5677,36.5475 66.2877,36.4538 66.0892,36.2701C 65.8985,36.0839 65.7976,35.8183 65.7976,35.4772L 65.7976,35.4655 Z "/>
                                                                            <Path Width="1.41797" Height="3.24799" Canvas.Left="48.8471" Canvas.Top="4.18164" Stretch="Fill" Fill="#FF000000" Data="F1 M 49.6264,7.42963L 49.6264,5.20697L 48.8471,5.20697L 48.8471,4.75323L 48.8985,4.75323C 49.1811,4.75323 49.388,4.70963 49.5189,4.61975C 49.6445,4.53189 49.7233,4.38803 49.7461,4.18164L 50.2651,4.18164L 50.2651,7.42963L 49.6264,7.42963 Z "/>
                                                                            <Viewbox Width="4.75787" Height="3.33401" Canvas.Left="1.3952" Canvas.Top="17.6509">
                                                                                <Canvas Width="4.75787" Height="3.33401">
                                                                                    <Path Width="1.41666" Height="3.25" Canvas.Left="0" Canvas.Top="0" Stretch="Fill" Fill="#FF000000" Data="F1 M 0.774124,3.25L 0.774124,1.02548L 0,1.02548L 0,0.571075L 0.0521393,0.571075C 0.330811,0.571075 0.538406,0.528015 0.666656,0.438293C 0.797607,0.351624 0.871063,0.206421 0.895874,0L 1.41666,0L 1.41666,3.25L 0.774124,3.25 Z "/>
                                                                                    <Path Width="2.34842" Height="3.33401" Canvas.Left="2.40945" Canvas.Top="0" Stretch="Fill" Fill="#FF000000" Data="F1 M 2.40945,1.66803C 2.40945,1.10815 2.50854,0.694702 2.69667,0.414825C 2.89786,0.13681 3.18494,0 3.582,0C 3.97133,0 4.26627,0.140015 4.46228,0.414825C 4.65894,0.694702 4.75787,1.11536 4.75787,1.67136C 4.75787,2.23056 4.65894,2.64655 4.46228,2.92322C 4.27347,3.19736 3.97534,3.33401 3.582,3.33401C 3.18494,3.33401 2.89786,3.19736 2.69667,2.92068C 2.50854,2.64337 2.40945,2.22668 2.40945,1.66803 Z M 3.08467,1.66803C 3.08467,2.06256 3.12106,2.34842 3.20186,2.52869C 3.28253,2.70575 3.40826,2.79376 3.582,2.79376C 3.75587,2.79376 3.88026,2.70575 3.95906,2.52615C 4.04172,2.34509 4.08467,2.05936 4.08467,1.66803C 4.08467,1.27802 4.04172,0.989624 3.95906,0.813232C 3.88026,0.630951 3.75587,0.540405 3.582,0.540405C 3.40826,0.540405 3.28253,0.630951 3.20186,0.810028C 3.12106,0.989624 3.08467,1.27481 3.08467,1.66803 Z "/>
                                                                                </Canvas>
                                                                            </Viewbox>
                                                                            <Viewbox Width="4.05081" Height="3.24799" Canvas.Left="14.3209" Canvas.Top="4.18164">
                                                                                <Canvas Width="4.05081" Height="3.24799">
                                                                                    <Path Width="1.41798" Height="3.24799" Canvas.Left="0" Canvas.Top="0" Stretch="Fill" Fill="#FF000000" Data="F1 M 0.775467,3.24799L 0.775467,1.02533L 0,1.02533L 0,0.571594L 0.0541382,0.571594C 0.331467,0.571594 0.538528,0.527985 0.673203,0.43811C 0.798935,0.35025 0.872391,0.20639 0.899185,0L 1.41798,0L 1.41798,3.24799L 0.775467,3.24799 Z "/>
                                                                                    <Path Width="1.416" Height="3.24799" Canvas.Left="2.63481" Canvas.Top="0" Stretch="Fill" Fill="#FF000000" Data="F1 M 3.41092,3.24799L 3.41092,1.02533L 2.63481,1.02533L 2.63481,0.571594L 2.68427,0.571594C 2.96747,0.571594 3.17587,0.527985 3.30347,0.43811C 3.43106,0.35025 3.50986,0.20639 3.52798,0L 4.05081,0L 4.05081,3.24799L 3.41092,3.24799 Z "/>
                                                                                </Canvas>
                                                                            </Viewbox>
                                                                            <Path Width="2.32678" Height="3.24866" Canvas.Left="49.7624" Canvas.Top="62.3327" Stretch="Fill" Fill="#FF000000" Data="F1 M 49.7624,64.6152L 50.3965,64.6152C 50.4056,64.7546 50.4544,64.8678 50.5384,64.9447C 50.6244,65.0254 50.7376,65.0592 50.879,65.0592C 51.0573,65.0592 51.1895,65.0059 51.2832,64.9095C 51.3751,64.8054 51.4212,64.6595 51.4212,64.4655C 51.4212,64.2844 51.3731,64.1412 51.2767,64.0396C 51.1817,63.9382 51.0501,63.8835 50.8848,63.8835C 50.7884,63.8835 50.7064,63.903 50.6393,63.9407C 50.5619,63.9798 50.504,64.0344 50.4544,64.1074L 49.8705,64.0775L 50.082,62.3327L 51.948,62.3327L 51.948,62.8835L 50.5384,62.8835L 50.4544,63.5332C 50.5261,63.4772 50.6081,63.433 50.6999,63.4056C 50.7931,63.3783 50.8939,63.3652 51.0072,63.3652C 51.3295,63.3652 51.5925,63.4616 51.7911,63.6568C 51.9903,63.8522 52.0892,64.1139 52.0892,64.4303C 52.0892,64.7819 51.9819,65.0592 51.7585,65.2636C 51.5397,65.4759 51.2455,65.5814 50.879,65.5814C 50.5431,65.5814 50.2761,65.498 50.0768,65.321C 49.8776,65.1491 49.7702,64.9134 49.7624,64.6152 Z "/>
                                                                            <Path Width="2.29825" Height="3.15491" Canvas.Left="15.4987" Canvas.Top="62.3327" Stretch="Fill" Fill="#FF000000" Data="F1 M 16.64,65.4876L 15.9636,65.4876C 15.9857,65.0475 16.0931,64.6022 16.2813,64.1672C 16.472,63.7376 16.7429,63.3054 17.0951,62.8887L 15.4987,62.8887L 15.4987,62.3327L 17.7969,62.3327L 17.7969,62.8183C 17.4433,63.209 17.1719,63.6283 16.976,64.0683C 16.7877,64.5059 16.6745,64.9784 16.64,65.4876 Z "/>
                                                                            <Path Width="2.30469" Height="3.25" Canvas.Left="62.1387" Canvas.Top="17.6509" Stretch="Fill" Fill="#FF000000" Data="F1 M 62.1387,20.9009C 62.14,20.6087 62.2019,20.36 62.3249,20.1615C 62.446,19.9563 62.6608,19.7539 62.9681,19.5455C 63.013,19.5111 63.0833,19.4714 63.1745,19.4147C 63.582,19.1504 63.7832,18.8991 63.7832,18.6602C 63.7832,18.515 63.7435,18.4016 63.6556,18.319C 63.5716,18.235 63.4512,18.1913 63.3008,18.1913C 63.1387,18.1913 63.0117,18.2467 62.9232,18.3456C 62.8373,18.4518 62.7911,18.5976 62.7911,18.7826L 62.7911,18.8092L 62.1908,18.8092C 62.1908,18.4407 62.2924,18.1556 62.4889,17.9511C 62.6882,17.75 62.9747,17.6509 63.3457,17.6509C 63.6752,17.6509 63.946,17.7408 64.1445,17.9244C 64.3437,18.1067 64.4433,18.3456 64.4433,18.6491C 64.4433,18.8666 64.3939,19.0547 64.2877,19.2148C 64.1804,19.3749 63.9819,19.552 63.6829,19.7539C 63.6179,19.8002 63.53,19.856 63.4187,19.9278C 63.1328,20.1087 62.9747,20.2487 62.9376,20.3444L 64.4122,20.3444L 64.4122,20.9009L 62.1387,20.9009 Z "/>
                                                                            <Path Width="2.336" Height="3.34372" Canvas.Left="3.26826" Canvas.Top="48.5371" Stretch="Fill" Fill="#FF000000" Data="F1 M 3.74226,50.0814C 3.60547,50.0005 3.51039,49.9172 3.446,49.8144C 3.3868,49.7155 3.35681,49.5839 3.35681,49.4225C 3.35681,49.1464 3.45508,48.9316 3.64655,48.7688C 3.832,48.6114 4.09706,48.5371 4.43361,48.5371C 4.7748,48.5371 5.0372,48.6114 5.22853,48.7688C 5.41733,48.929 5.51559,49.1464 5.51559,49.4225C 5.51559,49.5787 5.48187,49.7051 5.41733,49.8144C 5.35426,49.9264 5.25587,50.0136 5.1264,50.0814C 5.28253,50.1543 5.39906,50.2559 5.48373,50.3887C 5.56253,50.5136 5.60426,50.6751 5.60426,50.8652C 5.60426,51.179 5.49747,51.4278 5.29041,51.6074C 5.08333,51.7923 4.79626,51.8808 4.43361,51.8808C 4.06119,51.8808 3.77667,51.7923 3.57161,51.6114C 3.36653,51.4303 3.26826,51.183 3.26826,50.8652C 3.26826,50.6778 3.30214,50.524 3.38161,50.3964C 3.4584,50.2715 3.5788,50.166 3.74226,50.0814 Z M 3.92386,50.8392C 3.92386,51.0019 3.97079,51.123 4.05667,51.2103C 4.14655,51.2975 4.27213,51.3339 4.4388,51.3339C 4.59506,51.3339 4.7168,51.2975 4.80667,51.2076C 4.89853,51.1178 4.94081,51.0019 4.94081,50.8392C 4.94081,50.6934 4.89719,50.5735 4.80347,50.4798C 4.71094,50.3887 4.5912,50.3418 4.4388,50.3418C 4.2832,50.3418 4.16212,50.3887 4.06708,50.4824C 3.97079,50.5762 3.92386,50.6985 3.92386,50.8392 Z M 3.9772,49.4485C 3.9772,49.5787 4.01694,49.6712 4.09706,49.7402C 4.17453,49.8054 4.2832,49.8392 4.43361,49.8392C 4.58014,49.8392 4.69214,49.8054 4.7748,49.7376C 4.84961,49.6685 4.89133,49.5723 4.89133,49.4485C 4.89133,49.3287 4.84961,49.2363 4.76894,49.162C 4.68759,49.097 4.57361,49.0579 4.43361,49.0579C 4.29306,49.0579 4.18227,49.097 4.10159,49.1647C 4.01694,49.2363 3.9772,49.3327 3.9772,49.4485 Z "/>
                                                                            <Path Width="2.38214" Height="3.1524" Canvas.Left="61.9037" Canvas.Top="48.6295" Stretch="Fill" Fill="#FF000000" Data="F1 M 63.2728,51.7819L 63.2728,51.0892L 61.9037,51.0892L 61.9037,50.5136L 63.0989,48.6295L 63.9069,48.6295L 63.9069,50.571L 64.2859,50.571L 64.2859,51.0892L 63.9069,51.0892L 63.9069,51.7819L 63.2728,51.7819 Z M 63.2877,50.5827L 63.2877,49.1959L 62.4043,50.5827L 63.2877,50.5827 Z "/>
                                                                        </Canvas>
                                                                    </Viewbox>
                                                                    <Path Width="3.34894" Height="25.334" Canvas.Left="41.0052" Canvas.Top="21.5905" Stretch="Fill" Fill="#FF3A424F" Data="F1 M 41.0052,46.9245L 42.6783,21.5905L 44.3541,46.9245L 41.0052,46.9245 Z "/>
                                                                    <Path Width="35.9264" Height="1.78708" Canvas.Left="35.274" Canvas.Top="41.4381" Stretch="Fill" Fill="#FF3A424F" Data="F1 M 35.274,41.4381L 71.2004,42.3333L 35.274,43.2252L 35.274,41.4381 Z "/>
                                                                    <Path Width="26.0396" Height="26.0416" Canvas.Left="37.6725" Canvas.Top="37.6303" Stretch="Fill" Fill="#FFFDB65C" Data="F1 M 38.9355,37.6303L 63.7121,63.6719L 37.6725,38.8945L 38.9355,37.6303 Z "/>
                                                                    <Path Width="7.04358" Height="7.04428" Canvas.Left="38.944" Canvas.Top="38.9415" Stretch="Fill" Fill="#FF3A424F" Data="F1 M 45.9876,42.4609C 45.9876,44.4088 44.4113,45.9857 42.4628,45.9857C 40.5208,45.9857 38.944,44.4088 38.944,42.4609C 38.944,40.5176 40.5208,38.9415 42.4628,38.9415C 44.4113,38.9415 45.9876,40.5176 45.9876,42.4609 Z "/>
                                                                </Canvas>
                                                            </Viewbox>
                                                        </Grid>
                                                    </xctk:ButtonChrome>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                            <ToggleButton.Visibility>
                                <TemplateBinding Property="ShowDropDownButton">
                                    <TemplateBinding.Converter>
                                        <BooleanToVisibilityConverter/>
                                    </TemplateBinding.Converter>
                                </TemplateBinding>
                            </ToggleButton.Visibility>
                        </ToggleButton>

                        <Popup  Panel.ZIndex="5"  x:Name="PART_Popup" AllowsTransparency="True" IsOpen="{Binding IsChecked, ElementName=_timePickerToggleButton}" StaysOpen="False" ToolTip="" Placement="Bottom" VerticalOffset="0">
                            <Popup.Resources>
                                <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                    <Style.Triggers>
                                        <Trigger Property="Content" Value="">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Popup.Resources>

                            <Border Panel.ZIndex="6"  BorderBrush="#FFABADB3" BorderThickness="0" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=root}" CornerRadius="0,0,20,20">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                        <GradientStop Color="#FFF0F0F0" Offset="0"/>
                                        <GradientStop Color="#FFE5E5E5" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Grid Margin="0,0,0,5">
                                    <ListBox x:Name="PART_TimeListItems" BorderThickness="0" DisplayMemberPath="Display" Style="{DynamicResource ListBoxStyleTimePicker}">
                                        <ListBox.ItemContainerStyle>
                                            <Style TargetType="{x:Type ListBoxItem}">
                                                <Setter Property="Padding" Value="4"/>
                                                <Style.Triggers>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsMouseOver" Value="True"/>
                                                            <Condition Property="IsSelected" Value="False"/>
                                                        </MultiTrigger.Conditions>
                                                        <Setter Property="Background" Value="#FFB8E0F3"/>
                                                        <Setter Property="BorderBrush" Value="#FF26A0DA"/>
                                                    </MultiTrigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsMouseOver" Value="False"/>
                                                            <Condition Property="IsSelected" Value="True"/>
                                                        </MultiTrigger.Conditions>
                                                        <Setter Property="Background" Value="#FFC4E5F6"/>
                                                        <Setter Property="BorderBrush" Value="#FF26A0DA"/>
                                                    </MultiTrigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsMouseOver" Value="True"/>
                                                            <Condition Property="IsSelected" Value="True"/>
                                                        </MultiTrigger.Conditions>
                                                        <Setter Property="Background" Value="#FFD1E8FF"/>
                                                        <Setter Property="BorderBrush" Value="#FF66A7E8"/>
                                                    </MultiTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ListBox.ItemContainerStyle>
                                    </ListBox>
                                </Grid>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlMouseOverBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True"/>
                        </DataTrigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="FocusManager.FocusedElement" TargetName="PART_TextBox" Value="{Binding ElementName=PART_TextBox}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="WatermarkTextBoxStyleForm" TargetType="{x:Type xctk:WatermarkTextBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="WatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:WatermarkTextBox}">
                    <Grid>
                        <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="15">
                            <Grid>
                                <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <ContentPresenter x:Name="PART_WatermarkHost" Content="{TemplateBinding Watermark}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <ContentPresenter.ContentTemplate>
                                        <Binding Path="WatermarkTemplate" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.TargetNullValue>
                                                <DataTemplate>
                                                    <ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False"/>
                                                </DataTemplate>
                                            </Binding.TargetNullValue>
                                        </Binding>
                                    </ContentPresenter.ContentTemplate>
                                </ContentPresenter>
                            </Grid>
                        </Border>
                        <Border x:Name="MouseOverVisual" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" Opacity="0">
                            <Border.BorderBrush>
                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                    <GradientStop Color="#FF5794BF" Offset="0.05"/>
                                    <GradientStop Color="#FFB7D5EA" Offset="0.07"/>
                                    <GradientStop Color="#FFC7E2F1" Offset="1"/>
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                        </Border>
                        <Border x:Name="FocusVisual" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" Opacity="0">
                            <Border.BorderBrush>
                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                    <GradientStop Color="#FF3D7BAD" Offset="0.05"/>
                                    <GradientStop Color="#FFA4C9E3" Offset="0.07"/>
                                    <GradientStop Color="#FFB7D9ED" Offset="1"/>
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="KeepWatermarkOnGotFocus" Value="False"/>
                                <Condition Property="IsFocused" Value="False"/>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="KeepWatermarkOnGotFocus" Value="True"/>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlMouseOverBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonSpinnerStyleForm" TargetType="{x:Type xctk:ButtonSpinner}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="IsTabStop" Value="True"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:ButtonSpinner}">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="15">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="firstContentColumn" Width="*"/>
                                <ColumnDefinition x:Name="secondContentColumn" Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="contentPresenter" Content="{TemplateBinding Content}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Grid x:Name="gridContent" Grid.Column="1" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Grid.Visibility>
                                    <TemplateBinding Property="ShowButtonSpinner">
                                        <TemplateBinding.Converter>
                                            <BooleanToVisibilityConverter/>
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </Grid.Visibility>
                                <RepeatButton x:Name="PART_IncreaseButton" IsTabStop="{TemplateBinding IsTabStop}" Style="{DynamicResource RepeatButtonStyleTimePicker}" Foreground="White" BorderThickness="0">
                                    <RepeatButton.ContentTemplate>
                                        <DataTemplate>
                                            <Path Data="M0,5L4.5,0.5 9,5 6,5 4.5,3.5 3,5z" Focusable="False" Fill="{DynamicResource {ComponentResourceKey ResourceId=GlyphNormalForegroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" HorizontalAlignment="Center" Height="5" SnapsToDevicePixels="True" VerticalAlignment="Center" Width="9"/>
                                        </DataTemplate>
                                    </RepeatButton.ContentTemplate>
                                </RepeatButton>
                                <RepeatButton x:Name="PART_DecreaseButton" IsTabStop="{TemplateBinding IsTabStop}" Grid.Row="1" Style="{DynamicResource RepeatButtonStyleTimePicker}" RenderTransformOrigin="0.5,0.5" BorderThickness="0">
                                    <RepeatButton.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleY="1" ScaleX="-1"/>
                                            <SkewTransform AngleY="0" AngleX="0"/>
                                            <RotateTransform Angle="-180"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </RepeatButton.RenderTransform>
                                    <RepeatButton.ContentTemplate>
                                        <DataTemplate>
                                            <Path Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z" Focusable="False" Fill="{DynamicResource {ComponentResourceKey ResourceId=GlyphNormalForegroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" HorizontalAlignment="Center" Height="5" SnapsToDevicePixels="True" VerticalAlignment="Center" Width="9"/>
                                        </DataTemplate>
                                    </RepeatButton.ContentTemplate>
                                </RepeatButton>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlMouseOverBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlDisabledBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" SourceName="PART_IncreaseButton" Value="False">
                            <Setter Property="ContentTemplate" TargetName="PART_IncreaseButton">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Path Data="M0,5L4.5,0.5 9,5 6,5 4.5,3.5 3,5z" Focusable="False" Fill="{DynamicResource {ComponentResourceKey ResourceId=GlyphDisabledForegroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" HorizontalAlignment="Center" Height="5" SnapsToDevicePixels="True" VerticalAlignment="Center" Width="9"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" SourceName="PART_DecreaseButton" Value="False">
                            <Setter Property="ContentTemplate" TargetName="PART_DecreaseButton">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Path Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z" Focusable="False" Fill="{DynamicResource {ComponentResourceKey ResourceId=GlyphDisabledForegroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" HorizontalAlignment="Center" Height="5" SnapsToDevicePixels="True" VerticalAlignment="Center" Width="9"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="ButtonSpinnerLocation" Value="Left">
                            <Setter Property="Width" TargetName="firstContentColumn" Value="Auto"/>
                            <Setter Property="Width" TargetName="secondContentColumn" Value="*"/>
                            <Setter Property="Grid.Column" TargetName="contentPresenter" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="gridContent" Value="0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonChromeStyleForm" TargetType="{x:Type xctk:ButtonChrome}">
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonNormalBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonNormalOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:ButtonChrome}">
                    <Grid>
                        <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}"/>
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" IsEnabled="{TemplateBinding IsEnabled}" Margin="{TemplateBinding Padding}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="False"/>
                                <Condition Property="RenderChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <!--<Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonDisabledOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>-->
                            <!--<Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlDisabledBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>-->
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True"/>
                                <Condition Property="RenderPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <!--<Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonPressedOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>-->
                            <!--<Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonPressedBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>-->
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True"/>
                                <Condition Property="RenderChecked" Value="False"/>
                                <Condition Property="RenderMouseOver" Value="True"/>
                                <Condition Property="RenderPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <!--<Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>-->
                            <!--<Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>-->
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True"/>
                                <Condition Property="RenderChecked" Value="True"/>
                                <Condition Property="RenderMouseOver" Value="False"/>
                                <Condition Property="RenderPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <!--<Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonPressedOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>-->
                            <!--<Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonPressedBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>-->
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderFocused" Value="True"/>
                                <Condition Property="RenderEnabled" Value="True"/>
                                <Condition Property="RenderPressed" Value="False"/>
                                <Condition Property="RenderMouseOver" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonFocusedOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonFocusedBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderNormal" Value="False"/>
                                <Condition Property="RenderChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="Transparent"/>
                            <Setter Property="Background" TargetName="OuterBorder" Value="Transparent"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RepeatButtonStyleTimePicker" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonNormalBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonNormalOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <xctk:ButtonChrome x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource {ComponentResourceKey ResourceId=SpinButtonCornerRadiusKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" RenderNormal="True" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RenderEnabled="{TemplateBinding IsEnabled}" SnapsToDevicePixels="True" Style="{DynamicResource ButtonChromeStyleTimePicker}" BorderThickness="0" Margin="0"/>
                        <Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="0" VerticalAlignment="Center">
                            <Viewbox Height="Auto" Margin="0,0,2,0" Width="12" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" RenderTransformOrigin="0.5,0.5">
                                <Viewbox.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="180"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Viewbox.RenderTransform>
                                <Path x:Name="Arrow" Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z" Fill="{DynamicResource BrushWhiteForm}"/>
                            </Viewbox>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonChromeStyleTimePicker" TargetType="{x:Type xctk:ButtonChrome}">
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonNormalBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonNormalOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:ButtonChrome}">
                    <Grid>
                        <Border x:Name="OuterBorder" CornerRadius="0,15,0,0" Background="{DynamicResource BrushOrange}" BorderThickness="0,0,0,0.5" BorderBrush="{DynamicResource BrushWhiteForm}"/>
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" IsEnabled="{TemplateBinding IsEnabled}" Margin="{TemplateBinding Padding}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="False"/>
                                <Condition Property="RenderChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonDisabledOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlDisabledBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True"/>
                                <Condition Property="RenderPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonPressedOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonPressedBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True"/>
                                <Condition Property="RenderChecked" Value="False"/>
                                <Condition Property="RenderMouseOver" Value="True"/>
                                <Condition Property="RenderPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True"/>
                                <Condition Property="RenderChecked" Value="True"/>
                                <Condition Property="RenderMouseOver" Value="False"/>
                                <Condition Property="RenderPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonPressedOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonPressedBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderFocused" Value="True"/>
                                <Condition Property="RenderEnabled" Value="True"/>
                                <Condition Property="RenderPressed" Value="False"/>
                                <Condition Property="RenderMouseOver" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonFocusedOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonFocusedBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderNormal" Value="False"/>
                                <Condition Property="RenderChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="Transparent"/>
                            <Setter Property="Background" TargetName="OuterBorder" Value="Transparent"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="ListBox.Static.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ListBox.Static.Border" Color="#FFABADB3"/>
    <SolidColorBrush x:Key="ListBox.Disabled.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ListBox.Disabled.Border" Color="#FFD9D9D9"/>
    <Style x:Key="ListBoxStyleTimePicker" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{StaticResource ListBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBox.Static.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Padding="0" SnapsToDevicePixels="true" CornerRadius="0,0,20,20" Margin="0">
                        <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}" Margin="0,0,0,5">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Border}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ControlTemplateViewPlaning" TargetType="{x:Type Control}">
        <Grid Width="350" Height="350">
            <Grid.RowDefinitions>
                <RowDefinition Height="140"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.Effect>
                <DropShadowEffect Opacity="0.2" BlurRadius="10" Direction="270" ShadowDepth="15"/>
            </Grid.Effect>
            <Border Width="Auto" Height="Auto" 
                    Background="{TemplateBinding Background}" CornerRadius="50" BorderThickness="5" 
                    BorderBrush="{DynamicResource BrushWhiteForm}" Grid.RowSpan="2">
                <Border.Effect>
                    <DropShadowEffect Direction="90" BlurRadius="10" Opacity="0.2"/>
                </Border.Effect>
            </Border>
            <Border Width="Auto" Height="Auto"
                    Background="{DynamicResource BrushWhiteForm}" CornerRadius="50,50,0,0" BorderThickness="3" 
                    BorderBrush="{DynamicResource BrushWhiteForm}" VerticalAlignment="Stretch">
                <TextBlock FontWeight="Bold" FontSize="42" Text="{TemplateBinding Tag}" TextWrapping="Wrap" HorizontalAlignment="Stretch" TextAlignment="Center" Margin="0,0,9,0" VerticalAlignment="Center" Foreground="Black"/>
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="ColorPickerStyleForm" TargetType="{x:Type xctk:ColorPicker}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
        <Setter Property="BorderThickness" Value="1,1,0,1"/>
        <Setter Property="ButtonStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ToggleButton}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                <Grid SnapsToDevicePixels="True">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        </Border>
                                        <xctk:ButtonChrome x:Name="ToggleButtonChrome" Grid.Column="1" CornerRadius="0" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}}" RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}}">
                                            <xctk:ButtonChrome.Visibility>
                                                <Binding Path="ShowDropDownButton" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}">
                                                    <Binding.Converter>
                                                        <BooleanToVisibilityConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </xctk:ButtonChrome.Visibility>
                                            <Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="5">
                                                <Path x:Name="Arrow" Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z" Fill="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" Height="5" Margin="0,1,0,0" Width="9"/>
                                            </Grid>
                                        </xctk:ButtonChrome>
                                    </Grid>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:ColorPicker}">
                    <Grid>
                        <ToggleButton x:Name="PART_ColorPickerToggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsTabStop="True" IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MinHeight="22" Padding="{TemplateBinding Padding}" Style="{TemplateBinding ButtonStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ToggleButton.IsHitTestVisible>
                                <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <xctk:InverseBoolConverter/>
                                    </Binding.Converter>
                                </Binding>
                            </ToggleButton.IsHitTestVisible>
                            <Grid Margin="2">
                                <ContentControl x:Name="ColorOnly">
                                    <ContentControl.Style>
                                        <Style TargetType="{x:Type ContentControl}">
                                            <Setter Property="Focusable" Value="False"/>
                                            <Setter Property="ContentTemplate">
                                                <Setter.Value>
                                                    <DataTemplate>
                                                        <Border>
                                                            <Border.Background>
                                                                <DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
                                                                    <DrawingBrush.Drawing>
                                                                        <DrawingGroup>
                                                                            <GeometryDrawing Brush="White">
                                                                                <GeometryDrawing.Geometry>
                                                                                    <RectangleGeometry Rect="0,0,100,100"/>
                                                                                </GeometryDrawing.Geometry>
                                                                            </GeometryDrawing>
                                                                            <GeometryDrawing Brush="LightGray">
                                                                                <GeometryDrawing.Geometry>
                                                                                    <GeometryGroup>
                                                                                        <RectangleGeometry Rect="0,0,50,50"/>
                                                                                        <RectangleGeometry Rect="50,50,50,50"/>
                                                                                    </GeometryGroup>
                                                                                </GeometryDrawing.Geometry>
                                                                            </GeometryDrawing>
                                                                        </DrawingGroup>
                                                                    </DrawingBrush.Drawing>
                                                                </DrawingBrush>
                                                            </Border.Background>
                                                            <Rectangle>
                                                                <Rectangle.Fill>
                                                                    <Binding Path="SelectedColor" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}">
                                                                        <Binding.Converter>
                                                                            <xctk:ColorToSolidColorBrushConverter/>
                                                                        </Binding.Converter>
                                                                    </Binding>
                                                                </Rectangle.Fill>
                                                            </Rectangle>
                                                        </Border>
                                                    </DataTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding SelectedColor, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}}" Value="{x:Null}">
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ContentControl.Style>
                                </ContentControl>
                                <Border x:Name="ColorAndName" Background="White" Visibility="Hidden">
                                    <StackPanel Orientation="Horizontal">
                                        <ContentControl BorderBrush="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" BorderThickness="1" HorizontalAlignment="Left" Margin="2,1,4,1" Width="20">
                                            <ContentControl.Style>
                                                <Style TargetType="{x:Type ContentControl}">
                                                    <Setter Property="Focusable" Value="False"/>
                                                    <Setter Property="ContentTemplate">
                                                        <Setter.Value>
                                                            <DataTemplate>
                                                                <Border>
                                                                    <Border.Background>
                                                                        <DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
                                                                            <DrawingBrush.Drawing>
                                                                                <DrawingGroup>
                                                                                    <GeometryDrawing Brush="White">
                                                                                        <GeometryDrawing.Geometry>
                                                                                            <RectangleGeometry Rect="0,0,100,100"/>
                                                                                        </GeometryDrawing.Geometry>
                                                                                    </GeometryDrawing>
                                                                                    <GeometryDrawing Brush="LightGray">
                                                                                        <GeometryDrawing.Geometry>
                                                                                            <GeometryGroup>
                                                                                                <RectangleGeometry Rect="0,0,50,50"/>
                                                                                                <RectangleGeometry Rect="50,50,50,50"/>
                                                                                            </GeometryGroup>
                                                                                        </GeometryDrawing.Geometry>
                                                                                    </GeometryDrawing>
                                                                                </DrawingGroup>
                                                                            </DrawingBrush.Drawing>
                                                                        </DrawingBrush>
                                                                    </Border.Background>
                                                                    <Rectangle>
                                                                        <Rectangle.Fill>
                                                                            <Binding Path="SelectedColor" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}">
                                                                                <Binding.Converter>
                                                                                    <xctk:ColorToSolidColorBrushConverter/>
                                                                                </Binding.Converter>
                                                                            </Binding>
                                                                        </Rectangle.Fill>
                                                                    </Rectangle>
                                                                </Border>
                                                            </DataTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding SelectedColor, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}}" Value="{x:Null}">
                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ContentControl.Style>
                                        </ContentControl>
                                        <TextBlock Text="{Binding SelectedColorText, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center"/>
                                    </StackPanel>
                                </Border>
                            </Grid>
                        </ToggleButton>
                        <Popup x:Name="PART_ColorPickerPalettePopup" AllowsTransparency="True" Focusable="False" HorizontalOffset="1" IsOpen="{Binding IsChecked, ElementName=PART_ColorPickerToggleButton}" PopupAnimation="Slide" StaysOpen="False" ToolTip="" VerticalOffset="1" VerticalAlignment="Bottom">
                            <Popup.Resources>
                                <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                    <Style.Triggers>
                                        <Trigger Property="Content" Value="">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Popup.Resources>
                            <Border BorderBrush="#FFABADB3" BorderThickness="1" Padding="3">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                        <GradientStop Color="#FFF0F0F0" Offset="0"/>
                                        <GradientStop Color="#FFE5E5E5" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid x:Name="_colorPaletteHost" Margin="4" Visibility="Collapsed">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Grid Grid.Row="1">
                                            <Grid.Visibility>
                                                <TemplateBinding Property="ShowAvailableColors">
                                                    <TemplateBinding.Converter>
                                                        <BooleanToVisibilityConverter/>
                                                    </TemplateBinding.Converter>
                                                </TemplateBinding>
                                            </Grid.Visibility>
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition/>
                                                </Grid.RowDefinitions>
                                                <TextBlock Background="AliceBlue" Margin="0,0,0,1" Padding="2" Text="{TemplateBinding AvailableColorsHeader}"/>
                                                <ListBox x:Name="PART_AvailableColors" Grid.Row="1">
                                                    <ListBox.Style>
                                                        <Style TargetType="{x:Type ListBox}">
                                                            <Setter Property="Background" Value="Transparent"/>
                                                            <Setter Property="BorderThickness" Value="0"/>
                                                            <Setter Property="ItemsPanel">
                                                                <Setter.Value>
                                                                    <ItemsPanelTemplate>
                                                                        <WrapPanel IsItemsHost="True" Width="200"/>
                                                                    </ItemsPanelTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="ItemContainerStyle">
                                                                <Setter.Value>
                                                                    <Style TargetType="{x:Type ListBoxItem}">
                                                                        <Setter Property="ToolTip" Value="{Binding Name}"/>
                                                                        <Setter Property="Template">
                                                                            <Setter.Value>
                                                                                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                                                    <Grid x:Name="mainGrid" ToolTip="{Binding Name}">
                                                                                        <Grid.Resources>
                                                                                            <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                                                                                <Style.Triggers>
                                                                                                    <Trigger Property="Content" Value="">
                                                                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                                                                    </Trigger>
                                                                                                </Style.Triggers>
                                                                                            </Style>
                                                                                        </Grid.Resources>
                                                                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                                        <Border x:Name="_outerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                                                            <Border x:Name="_innerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                                                                        </Border>
                                                                                    </Grid>
                                                                                    <ControlTemplate.Triggers>
                                                                                        <Trigger Property="IsMouseOver" Value="True">
                                                                                            <Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                                            <Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                                        </Trigger>
                                                                                        <Trigger Property="IsSelected" Value="True">
                                                                                            <Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                                            <Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                                        </Trigger>
                                                                                        <DataTrigger Binding="{Binding DisplayColorAndName, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}}" Value="False">
                                                                                            <Setter Property="ToolTip" TargetName="mainGrid" Value=""/>
                                                                                        </DataTrigger>
                                                                                    </ControlTemplate.Triggers>
                                                                                </ControlTemplate>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </Style>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="ItemTemplate">
                                                                <Setter.Value>
                                                                    <DataTemplate>
                                                                        <Grid>
                                                                            <Border BorderBrush="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" BorderThickness="1" Margin="2">
                                                                                <Border.Background>
                                                                                    <DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
                                                                                        <DrawingBrush.Drawing>
                                                                                            <DrawingGroup>
                                                                                                <GeometryDrawing Brush="White">
                                                                                                    <GeometryDrawing.Geometry>
                                                                                                        <RectangleGeometry Rect="0,0,100,100"/>
                                                                                                    </GeometryDrawing.Geometry>
                                                                                                </GeometryDrawing>
                                                                                                <GeometryDrawing Brush="LightGray">
                                                                                                    <GeometryDrawing.Geometry>
                                                                                                        <GeometryGroup>
                                                                                                            <RectangleGeometry Rect="0,0,50,50"/>
                                                                                                            <RectangleGeometry Rect="50,50,50,50"/>
                                                                                                        </GeometryGroup>
                                                                                                    </GeometryDrawing.Geometry>
                                                                                                </GeometryDrawing>
                                                                                            </DrawingGroup>
                                                                                        </DrawingBrush.Drawing>
                                                                                    </DrawingBrush>
                                                                                </Border.Background>
                                                                                <Rectangle Height="14" Width="14">
                                                                                    <Rectangle.Style>
                                                                                        <Style TargetType="{x:Type Rectangle}">
                                                                                            <Setter Property="Fill">
                                                                                                <Setter.Value>
                                                                                                    <Binding Path="Color">
                                                                                                        <Binding.Converter>
                                                                                                            <xctk:ColorToSolidColorBrushConverter/>
                                                                                                        </Binding.Converter>
                                                                                                    </Binding>
                                                                                                </Setter.Value>
                                                                                            </Setter>
                                                                                        </Style>
                                                                                    </Rectangle.Style>
                                                                                </Rectangle>
                                                                            </Border>
                                                                        </Grid>
                                                                    </DataTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="SelectionMode" Value="Single"/>
                                                        </Style>
                                                    </ListBox.Style>
                                                </ListBox>
                                            </Grid>
                                        </Grid>
                                        <Grid Grid.Row="2">
                                            <Grid.Visibility>
                                                <TemplateBinding Property="ShowStandardColors">
                                                    <TemplateBinding.Converter>
                                                        <BooleanToVisibilityConverter/>
                                                    </TemplateBinding.Converter>
                                                </TemplateBinding>
                                            </Grid.Visibility>
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                                <TextBlock Background="AliceBlue" Margin="0,1" Padding="2" Text="{TemplateBinding StandardColorsHeader}"/>
                                                <ListBox x:Name="PART_StandardColors" Grid.Row="1">
                                                    <ListBox.Style>
                                                        <Style TargetType="{x:Type ListBox}">
                                                            <Setter Property="Background" Value="Transparent"/>
                                                            <Setter Property="BorderThickness" Value="0"/>
                                                            <Setter Property="ItemsPanel">
                                                                <Setter.Value>
                                                                    <ItemsPanelTemplate>
                                                                        <WrapPanel IsItemsHost="True" Width="200"/>
                                                                    </ItemsPanelTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="ItemContainerStyle">
                                                                <Setter.Value>
                                                                    <Style TargetType="{x:Type ListBoxItem}">
                                                                        <Setter Property="ToolTip" Value="{Binding Name}"/>
                                                                        <Setter Property="Template">
                                                                            <Setter.Value>
                                                                                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                                                    <Grid x:Name="mainGrid" ToolTip="{Binding Name}">
                                                                                        <Grid.Resources>
                                                                                            <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                                                                                <Style.Triggers>
                                                                                                    <Trigger Property="Content" Value="">
                                                                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                                                                    </Trigger>
                                                                                                </Style.Triggers>
                                                                                            </Style>
                                                                                        </Grid.Resources>
                                                                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                                        <Border x:Name="_outerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                                                            <Border x:Name="_innerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                                                                        </Border>
                                                                                    </Grid>
                                                                                    <ControlTemplate.Triggers>
                                                                                        <Trigger Property="IsMouseOver" Value="True">
                                                                                            <Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                                            <Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                                        </Trigger>
                                                                                        <Trigger Property="IsSelected" Value="True">
                                                                                            <Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                                            <Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                                        </Trigger>
                                                                                        <DataTrigger Binding="{Binding DisplayColorAndName, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}}" Value="False">
                                                                                            <Setter Property="ToolTip" TargetName="mainGrid" Value=""/>
                                                                                        </DataTrigger>
                                                                                    </ControlTemplate.Triggers>
                                                                                </ControlTemplate>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </Style>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="ItemTemplate">
                                                                <Setter.Value>
                                                                    <DataTemplate>
                                                                        <Grid>
                                                                            <Border BorderBrush="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" BorderThickness="1" Margin="2">
                                                                                <Border.Background>
                                                                                    <DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
                                                                                        <DrawingBrush.Drawing>
                                                                                            <DrawingGroup>
                                                                                                <GeometryDrawing Brush="White">
                                                                                                    <GeometryDrawing.Geometry>
                                                                                                        <RectangleGeometry Rect="0,0,100,100"/>
                                                                                                    </GeometryDrawing.Geometry>
                                                                                                </GeometryDrawing>
                                                                                                <GeometryDrawing Brush="LightGray">
                                                                                                    <GeometryDrawing.Geometry>
                                                                                                        <GeometryGroup>
                                                                                                            <RectangleGeometry Rect="0,0,50,50"/>
                                                                                                            <RectangleGeometry Rect="50,50,50,50"/>
                                                                                                        </GeometryGroup>
                                                                                                    </GeometryDrawing.Geometry>
                                                                                                </GeometryDrawing>
                                                                                            </DrawingGroup>
                                                                                        </DrawingBrush.Drawing>
                                                                                    </DrawingBrush>
                                                                                </Border.Background>
                                                                                <Rectangle Height="14" Width="14">
                                                                                    <Rectangle.Style>
                                                                                        <Style TargetType="{x:Type Rectangle}">
                                                                                            <Setter Property="Fill">
                                                                                                <Setter.Value>
                                                                                                    <Binding Path="Color">
                                                                                                        <Binding.Converter>
                                                                                                            <xctk:ColorToSolidColorBrushConverter/>
                                                                                                        </Binding.Converter>
                                                                                                    </Binding>
                                                                                                </Setter.Value>
                                                                                            </Setter>
                                                                                        </Style>
                                                                                    </Rectangle.Style>
                                                                                </Rectangle>
                                                                            </Border>
                                                                        </Grid>
                                                                    </DataTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="SelectionMode" Value="Single"/>
                                                        </Style>
                                                    </ListBox.Style>
                                                </ListBox>
                                            </Grid>
                                        </Grid>
                                        <Grid Margin="0,1" Grid.Row="3">
                                            <Grid.Visibility>
                                                <TemplateBinding Property="ShowRecentColors">
                                                    <TemplateBinding.Converter>
                                                        <BooleanToVisibilityConverter/>
                                                    </TemplateBinding.Converter>
                                                </TemplateBinding>
                                            </Grid.Visibility>
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="22"/>
                                                </Grid.RowDefinitions>
                                                <TextBlock Background="AliceBlue" Margin="0,1" Padding="2" Text="{TemplateBinding RecentColorsHeader}"/>
                                                <ListBox x:Name="PART_RecentColors" Grid.Row="1">
                                                    <ListBox.Style>
                                                        <Style TargetType="{x:Type ListBox}">
                                                            <Setter Property="Background" Value="Transparent"/>
                                                            <Setter Property="BorderThickness" Value="0"/>
                                                            <Setter Property="ItemsPanel">
                                                                <Setter.Value>
                                                                    <ItemsPanelTemplate>
                                                                        <WrapPanel IsItemsHost="True" Width="200"/>
                                                                    </ItemsPanelTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="ItemContainerStyle">
                                                                <Setter.Value>
                                                                    <Style TargetType="{x:Type ListBoxItem}">
                                                                        <Setter Property="ToolTip" Value="{Binding Name}"/>
                                                                        <Setter Property="Template">
                                                                            <Setter.Value>
                                                                                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                                                    <Grid x:Name="mainGrid" ToolTip="{Binding Name}">
                                                                                        <Grid.Resources>
                                                                                            <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                                                                                <Style.Triggers>
                                                                                                    <Trigger Property="Content" Value="">
                                                                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                                                                    </Trigger>
                                                                                                </Style.Triggers>
                                                                                            </Style>
                                                                                        </Grid.Resources>
                                                                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                                        <Border x:Name="_outerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                                                            <Border x:Name="_innerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                                                                        </Border>
                                                                                    </Grid>
                                                                                    <ControlTemplate.Triggers>
                                                                                        <Trigger Property="IsMouseOver" Value="True">
                                                                                            <Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                                            <Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                                        </Trigger>
                                                                                        <Trigger Property="IsSelected" Value="True">
                                                                                            <Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                                            <Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                                        </Trigger>
                                                                                        <DataTrigger Binding="{Binding DisplayColorAndName, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}}" Value="False">
                                                                                            <Setter Property="ToolTip" TargetName="mainGrid" Value=""/>
                                                                                        </DataTrigger>
                                                                                    </ControlTemplate.Triggers>
                                                                                </ControlTemplate>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </Style>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="ItemTemplate">
                                                                <Setter.Value>
                                                                    <DataTemplate>
                                                                        <Grid>
                                                                            <Border BorderBrush="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" BorderThickness="1" Margin="2">
                                                                                <Border.Background>
                                                                                    <DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
                                                                                        <DrawingBrush.Drawing>
                                                                                            <DrawingGroup>
                                                                                                <GeometryDrawing Brush="White">
                                                                                                    <GeometryDrawing.Geometry>
                                                                                                        <RectangleGeometry Rect="0,0,100,100"/>
                                                                                                    </GeometryDrawing.Geometry>
                                                                                                </GeometryDrawing>
                                                                                                <GeometryDrawing Brush="LightGray">
                                                                                                    <GeometryDrawing.Geometry>
                                                                                                        <GeometryGroup>
                                                                                                            <RectangleGeometry Rect="0,0,50,50"/>
                                                                                                            <RectangleGeometry Rect="50,50,50,50"/>
                                                                                                        </GeometryGroup>
                                                                                                    </GeometryDrawing.Geometry>
                                                                                                </GeometryDrawing>
                                                                                            </DrawingGroup>
                                                                                        </DrawingBrush.Drawing>
                                                                                    </DrawingBrush>
                                                                                </Border.Background>
                                                                                <Rectangle Height="14" Width="14">
                                                                                    <Rectangle.Style>
                                                                                        <Style TargetType="{x:Type Rectangle}">
                                                                                            <Setter Property="Fill">
                                                                                                <Setter.Value>
                                                                                                    <Binding Path="Color">
                                                                                                        <Binding.Converter>
                                                                                                            <xctk:ColorToSolidColorBrushConverter/>
                                                                                                        </Binding.Converter>
                                                                                                    </Binding>
                                                                                                </Setter.Value>
                                                                                            </Setter>
                                                                                        </Style>
                                                                                    </Rectangle.Style>
                                                                                </Rectangle>
                                                                            </Border>
                                                                        </Grid>
                                                                    </DataTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="SelectionMode" Value="Single"/>
                                                        </Style>
                                                    </ListBox.Style>
                                                </ListBox>
                                            </Grid>
                                        </Grid>
                                    </Grid>
                                    <Grid x:Name="_colorCanvasHost" Visibility="Collapsed">
                                        <xctk:ColorCanvas BorderThickness="0" Background="Transparent" SelectedColor="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}}" UsingAlphaChannel="{Binding UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </Grid>
                                    <Separator HorizontalAlignment="Stretch" Margin="5,0" Grid.Row="1">
                                        <Separator.Visibility>
                                            <TemplateBinding Property="ShowAdvancedButton">
                                                <TemplateBinding.Converter>
                                                    <BooleanToVisibilityConverter/>
                                                </TemplateBinding.Converter>
                                            </TemplateBinding>
                                        </Separator.Visibility>
                                    </Separator>
                                    <Button x:Name="PART_ColorModeButton" Margin="5" Grid.Row="2">
                                        <Button.Visibility>
                                            <TemplateBinding Property="ShowAdvancedButton">
                                                <TemplateBinding.Converter>
                                                    <BooleanToVisibilityConverter/>
                                                </TemplateBinding.Converter>
                                            </TemplateBinding>
                                        </Button.Visibility>
                                    </Button>
                                </Grid>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="DisplayColorAndName" Value="True">
                            <Setter Property="Visibility" TargetName="ColorOnly" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="ColorAndName" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ColorMode" Value="ColorPalette">
                            <Setter Property="Visibility" TargetName="_colorPaletteHost" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="_colorCanvasHost" Value="Collapsed"/>
                            <Setter Property="Content" TargetName="PART_ColorModeButton" Value="{Binding AdvancedButtonHeader, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="ColorMode" Value="ColorCanvas">
                            <Setter Property="Visibility" TargetName="_colorPaletteHost" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="_colorCanvasHost" Value="Visible"/>
                            <Setter Property="Content" TargetName="PART_ColorModeButton" Value="{Binding StandardButtonHeader, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="ShowDropDownButton" Value="False">
                            <Setter Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlMouseOverBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ButtonStyleBig" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontFamily" Value="/CMWPF;component/Ressources/#FontAwesome"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Width="350" Height="350">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="140"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.Effect>
                            <DropShadowEffect Opacity="0.2" BlurRadius="10" Direction="270" ShadowDepth="15"/>
                        </Grid.Effect>
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="30" Grid.RowSpan="2" Visibility="Collapsed"/>


                        <Border Width="Auto" Height="Auto" 
                    		Background="{TemplateBinding Background}" CornerRadius="50" BorderThickness="5" 
                    		BorderBrush="{DynamicResource BrushWhiteForm}" Grid.RowSpan="2">
                            <Border.Effect>
                                <DropShadowEffect Direction="90" BlurRadius="10" Opacity="0.2"/>
                            </Border.Effect>
                        </Border>
                        <Border Width="Auto" Height="Auto"
                    		Background="{DynamicResource BrushWhiteForm}" CornerRadius="50,50,0,0" BorderThickness="3" 
                    		BorderBrush="{DynamicResource BrushWhiteForm}" VerticalAlignment="Stretch">
                            <TextBlock FontWeight="Bold" FontSize="42" Text="{TemplateBinding Tag}" TextWrapping="Wrap" HorizontalAlignment="Stretch" TextAlignment="Center" Margin="0,0,9,0" VerticalAlignment="Center" Foreground="Black"/>
                        </Border>


                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="0,30,0,40" Content="{TemplateBinding Content}" Grid.RowSpan="1" Grid.Row="1" VerticalAlignment="Top"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="BrushRedUni" Color="#FFD9322B"/>
    <SolidColorBrush x:Key="BrushGreenUni" Color="#FF1E6223"/>


    <Style 
       TargetType="ToolTip">
        <Setter Property="OverridesDefaultStyle"
          Value="true" />
        <Setter Property="HasDropShadow"
          Value="True" />
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="FontSize" Value="32"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Grid>
                        <Border Name="Border" BorderBrush="Black"
                                BorderThickness="1" CornerRadius="20" Background="White" Margin="0,0,0,0"
                                Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Height}">
                            <StackPanel>
                                <fa:ImageAwesome Icon="ToggleDown" Foreground="{TemplateBinding BorderBrush}" 
                                                 VerticalAlignment="Top" HorizontalAlignment="Center" Margin="10,5,0,0"/>

                                <ContentPresenter Margin="8,30,8,8"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top" />
                            </StackPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow"
                   Value="true">
                            <Setter TargetName="Border"
                    Property="CornerRadius"
                    Value="10" />
                            <Setter TargetName="Border"
                    Property="SnapsToDevicePixels"
                    Value="true" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>